// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ControlPlaneServingCertificateSpecApplyConfiguration represents an declarative configuration of the ControlPlaneServingCertificateSpec type for use
// with apply.
type ControlPlaneServingCertificateSpecApplyConfiguration struct {
	Default    *string                                               `json:"default,omitempty"`
	Additional []ControlPlaneAdditionalCertificateApplyConfiguration `json:"additional,omitempty"`
}

// ControlPlaneServingCertificateSpecApplyConfiguration constructs an declarative configuration of the ControlPlaneServingCertificateSpec type for use with
// apply.
func ControlPlaneServingCertificateSpec() *ControlPlaneServingCertificateSpecApplyConfiguration {
	return &ControlPlaneServingCertificateSpecApplyConfiguration{}
}

// WithDefault sets the Default field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Default field is set to the value of the last call.
func (b *ControlPlaneServingCertificateSpecApplyConfiguration) WithDefault(value string) *ControlPlaneServingCertificateSpecApplyConfiguration {
	b.Default = &value
	return b
}

// WithAdditional adds the given value to the Additional field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Additional field.
func (b *ControlPlaneServingCertificateSpecApplyConfiguration) WithAdditional(values ...*ControlPlaneAdditionalCertificateApplyConfiguration) *ControlPlaneServingCertificateSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAdditional")
		}
		b.Additional = append(b.Additional, *values[i])
	}
	return b
}
