// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterPoolSpecApplyConfiguration represents an declarative configuration of the ClusterPoolSpec type for use
// with apply.
type ClusterPoolSpecApplyConfiguration struct {
	Platform                       *PlatformApplyConfiguration                 `json:"platform,omitempty"`
	PullSecretRef                  *corev1.LocalObjectReference                `json:"pullSecretRef,omitempty"`
	Size                           *int32                                      `json:"size,omitempty"`
	RunningCount                   *int32                                      `json:"runningCount,omitempty"`
	MaxSize                        *int32                                      `json:"maxSize,omitempty"`
	MaxConcurrent                  *int32                                      `json:"maxConcurrent,omitempty"`
	BaseDomain                     *string                                     `json:"baseDomain,omitempty"`
	ImageSetRef                    *ClusterImageSetReferenceApplyConfiguration `json:"imageSetRef,omitempty"`
	Labels                         map[string]string                           `json:"labels,omitempty"`
	Annotations                    map[string]string                           `json:"annotations,omitempty"`
	InstallConfigSecretTemplateRef *corev1.LocalObjectReference                `json:"installConfigSecretTemplateRef,omitempty"`
	HibernateAfter                 *metav1.Duration                            `json:"hibernateAfter,omitempty"`
	InstallAttemptsLimit           *int32                                      `json:"installAttemptsLimit,omitempty"`
	SkipMachinePools               *bool                                       `json:"skipMachinePools,omitempty"`
	ClaimLifetime                  *ClusterPoolClaimLifetimeApplyConfiguration `json:"claimLifetime,omitempty"`
	HibernationConfig              *HibernationConfigApplyConfiguration        `json:"hibernationConfig,omitempty"`
	Inventory                      []InventoryEntryApplyConfiguration          `json:"inventory,omitempty"`
}

// ClusterPoolSpecApplyConfiguration constructs an declarative configuration of the ClusterPoolSpec type for use with
// apply.
func ClusterPoolSpec() *ClusterPoolSpecApplyConfiguration {
	return &ClusterPoolSpecApplyConfiguration{}
}

// WithPlatform sets the Platform field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Platform field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithPlatform(value *PlatformApplyConfiguration) *ClusterPoolSpecApplyConfiguration {
	b.Platform = value
	return b
}

// WithPullSecretRef sets the PullSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PullSecretRef field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithPullSecretRef(value corev1.LocalObjectReference) *ClusterPoolSpecApplyConfiguration {
	b.PullSecretRef = &value
	return b
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithSize(value int32) *ClusterPoolSpecApplyConfiguration {
	b.Size = &value
	return b
}

// WithRunningCount sets the RunningCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RunningCount field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithRunningCount(value int32) *ClusterPoolSpecApplyConfiguration {
	b.RunningCount = &value
	return b
}

// WithMaxSize sets the MaxSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxSize field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithMaxSize(value int32) *ClusterPoolSpecApplyConfiguration {
	b.MaxSize = &value
	return b
}

// WithMaxConcurrent sets the MaxConcurrent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxConcurrent field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithMaxConcurrent(value int32) *ClusterPoolSpecApplyConfiguration {
	b.MaxConcurrent = &value
	return b
}

// WithBaseDomain sets the BaseDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BaseDomain field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithBaseDomain(value string) *ClusterPoolSpecApplyConfiguration {
	b.BaseDomain = &value
	return b
}

// WithImageSetRef sets the ImageSetRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageSetRef field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithImageSetRef(value *ClusterImageSetReferenceApplyConfiguration) *ClusterPoolSpecApplyConfiguration {
	b.ImageSetRef = value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *ClusterPoolSpecApplyConfiguration) WithLabels(entries map[string]string) *ClusterPoolSpecApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *ClusterPoolSpecApplyConfiguration) WithAnnotations(entries map[string]string) *ClusterPoolSpecApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithInstallConfigSecretTemplateRef sets the InstallConfigSecretTemplateRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstallConfigSecretTemplateRef field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithInstallConfigSecretTemplateRef(value corev1.LocalObjectReference) *ClusterPoolSpecApplyConfiguration {
	b.InstallConfigSecretTemplateRef = &value
	return b
}

// WithHibernateAfter sets the HibernateAfter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HibernateAfter field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithHibernateAfter(value metav1.Duration) *ClusterPoolSpecApplyConfiguration {
	b.HibernateAfter = &value
	return b
}

// WithInstallAttemptsLimit sets the InstallAttemptsLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstallAttemptsLimit field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithInstallAttemptsLimit(value int32) *ClusterPoolSpecApplyConfiguration {
	b.InstallAttemptsLimit = &value
	return b
}

// WithSkipMachinePools sets the SkipMachinePools field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SkipMachinePools field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithSkipMachinePools(value bool) *ClusterPoolSpecApplyConfiguration {
	b.SkipMachinePools = &value
	return b
}

// WithClaimLifetime sets the ClaimLifetime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClaimLifetime field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithClaimLifetime(value *ClusterPoolClaimLifetimeApplyConfiguration) *ClusterPoolSpecApplyConfiguration {
	b.ClaimLifetime = value
	return b
}

// WithHibernationConfig sets the HibernationConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HibernationConfig field is set to the value of the last call.
func (b *ClusterPoolSpecApplyConfiguration) WithHibernationConfig(value *HibernationConfigApplyConfiguration) *ClusterPoolSpecApplyConfiguration {
	b.HibernationConfig = value
	return b
}

// WithInventory adds the given value to the Inventory field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Inventory field.
func (b *ClusterPoolSpecApplyConfiguration) WithInventory(values ...*InventoryEntryApplyConfiguration) *ClusterPoolSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInventory")
		}
		b.Inventory = append(b.Inventory, *values[i])
	}
	return b
}
