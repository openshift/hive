// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// ClusterProvisionStatusApplyConfiguration represents an declarative configuration of the ClusterProvisionStatus type for use
// with apply.
type ClusterProvisionStatusApplyConfiguration struct {
	JobRef     *v1.LocalObjectReference                      `json:"jobRef,omitempty"`
	Conditions []ClusterProvisionConditionApplyConfiguration `json:"conditions,omitempty"`
}

// ClusterProvisionStatusApplyConfiguration constructs an declarative configuration of the ClusterProvisionStatus type for use with
// apply.
func ClusterProvisionStatus() *ClusterProvisionStatusApplyConfiguration {
	return &ClusterProvisionStatusApplyConfiguration{}
}

// WithJobRef sets the JobRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JobRef field is set to the value of the last call.
func (b *ClusterProvisionStatusApplyConfiguration) WithJobRef(value v1.LocalObjectReference) *ClusterProvisionStatusApplyConfiguration {
	b.JobRef = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ClusterProvisionStatusApplyConfiguration) WithConditions(values ...*ClusterProvisionConditionApplyConfiguration) *ClusterProvisionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
