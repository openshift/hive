// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	hivev1 "github.com/openshift/hive/apis/hive/v1"
	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SyncSetSpecApplyConfiguration represents an declarative configuration of the SyncSetSpec type for use
// with apply.
type SyncSetSpecApplyConfiguration struct {
	SyncSetCommonSpecApplyConfiguration `json:",inline"`
	ClusterDeploymentRefs               []corev1.LocalObjectReference `json:"clusterDeploymentRefs,omitempty"`
}

// SyncSetSpecApplyConfiguration constructs an declarative configuration of the SyncSetSpec type for use with
// apply.
func SyncSetSpec() *SyncSetSpecApplyConfiguration {
	return &SyncSetSpecApplyConfiguration{}
}

// WithResources adds the given value to the Resources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Resources field.
func (b *SyncSetSpecApplyConfiguration) WithResources(values ...runtime.RawExtension) *SyncSetSpecApplyConfiguration {
	for i := range values {
		b.Resources = append(b.Resources, values[i])
	}
	return b
}

// WithResourceApplyMode sets the ResourceApplyMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceApplyMode field is set to the value of the last call.
func (b *SyncSetSpecApplyConfiguration) WithResourceApplyMode(value hivev1.SyncSetResourceApplyMode) *SyncSetSpecApplyConfiguration {
	b.ResourceApplyMode = &value
	return b
}

// WithPatches adds the given value to the Patches field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Patches field.
func (b *SyncSetSpecApplyConfiguration) WithPatches(values ...*SyncObjectPatchApplyConfiguration) *SyncSetSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPatches")
		}
		b.Patches = append(b.Patches, *values[i])
	}
	return b
}

// WithSecrets adds the given value to the Secrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Secrets field.
func (b *SyncSetSpecApplyConfiguration) WithSecrets(values ...*SecretMappingApplyConfiguration) *SyncSetSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSecrets")
		}
		b.Secrets = append(b.Secrets, *values[i])
	}
	return b
}

// WithApplyBehavior sets the ApplyBehavior field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApplyBehavior field is set to the value of the last call.
func (b *SyncSetSpecApplyConfiguration) WithApplyBehavior(value hivev1.SyncSetApplyBehavior) *SyncSetSpecApplyConfiguration {
	b.ApplyBehavior = &value
	return b
}

// WithClusterDeploymentRefs adds the given value to the ClusterDeploymentRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterDeploymentRefs field.
func (b *SyncSetSpecApplyConfiguration) WithClusterDeploymentRefs(values ...corev1.LocalObjectReference) *SyncSetSpecApplyConfiguration {
	for i := range values {
		b.ClusterDeploymentRefs = append(b.ClusterDeploymentRefs, values[i])
	}
	return b
}
