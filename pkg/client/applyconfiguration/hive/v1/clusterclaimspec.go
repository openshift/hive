// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterClaimSpecApplyConfiguration represents an declarative configuration of the ClusterClaimSpec type for use
// with apply.
type ClusterClaimSpecApplyConfiguration struct {
	ClusterPoolName *string          `json:"clusterPoolName,omitempty"`
	Subjects        []v1.Subject     `json:"subjects,omitempty"`
	Namespace       *string          `json:"namespace,omitempty"`
	Lifetime        *metav1.Duration `json:"lifetime,omitempty"`
}

// ClusterClaimSpecApplyConfiguration constructs an declarative configuration of the ClusterClaimSpec type for use with
// apply.
func ClusterClaimSpec() *ClusterClaimSpecApplyConfiguration {
	return &ClusterClaimSpecApplyConfiguration{}
}

// WithClusterPoolName sets the ClusterPoolName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterPoolName field is set to the value of the last call.
func (b *ClusterClaimSpecApplyConfiguration) WithClusterPoolName(value string) *ClusterClaimSpecApplyConfiguration {
	b.ClusterPoolName = &value
	return b
}

// WithSubjects adds the given value to the Subjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Subjects field.
func (b *ClusterClaimSpecApplyConfiguration) WithSubjects(values ...v1.Subject) *ClusterClaimSpecApplyConfiguration {
	for i := range values {
		b.Subjects = append(b.Subjects, values[i])
	}
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ClusterClaimSpecApplyConfiguration) WithNamespace(value string) *ClusterClaimSpecApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithLifetime sets the Lifetime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Lifetime field is set to the value of the last call.
func (b *ClusterClaimSpecApplyConfiguration) WithLifetime(value metav1.Duration) *ClusterClaimSpecApplyConfiguration {
	b.Lifetime = &value
	return b
}
