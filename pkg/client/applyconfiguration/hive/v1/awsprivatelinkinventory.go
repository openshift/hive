// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// AWSPrivateLinkInventoryApplyConfiguration represents an declarative configuration of the AWSPrivateLinkInventory type for use
// with apply.
type AWSPrivateLinkInventoryApplyConfiguration struct {
	AWSPrivateLinkVPCApplyConfiguration `json:",inline"`
	Subnets                             []AWSPrivateLinkSubnetApplyConfiguration `json:"subnets,omitempty"`
}

// AWSPrivateLinkInventoryApplyConfiguration constructs an declarative configuration of the AWSPrivateLinkInventory type for use with
// apply.
func AWSPrivateLinkInventory() *AWSPrivateLinkInventoryApplyConfiguration {
	return &AWSPrivateLinkInventoryApplyConfiguration{}
}

// WithVPCID sets the VPCID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VPCID field is set to the value of the last call.
func (b *AWSPrivateLinkInventoryApplyConfiguration) WithVPCID(value string) *AWSPrivateLinkInventoryApplyConfiguration {
	b.VPCID = &value
	return b
}

// WithRegion sets the Region field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Region field is set to the value of the last call.
func (b *AWSPrivateLinkInventoryApplyConfiguration) WithRegion(value string) *AWSPrivateLinkInventoryApplyConfiguration {
	b.Region = &value
	return b
}

// WithSubnets adds the given value to the Subnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Subnets field.
func (b *AWSPrivateLinkInventoryApplyConfiguration) WithSubnets(values ...*AWSPrivateLinkSubnetApplyConfiguration) *AWSPrivateLinkInventoryApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSubnets")
		}
		b.Subnets = append(b.Subnets, *values[i])
	}
	return b
}
