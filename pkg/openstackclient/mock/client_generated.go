// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	servers "github.com/gophercloud/gophercloud/openstack/compute/v2/servers"
	images "github.com/gophercloud/gophercloud/openstack/imageservice/v2/images"
	networks "github.com/gophercloud/gophercloud/openstack/networking/v2/networks"
	ports "github.com/gophercloud/gophercloud/openstack/networking/v2/ports"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateServerFromOpts mocks base method.
func (m *MockClient) CreateServerFromOpts(ctx context.Context, opts *servers.CreateOpts) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerFromOpts", ctx, opts)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerFromOpts indicates an expected call of CreateServerFromOpts.
func (mr *MockClientMockRecorder) CreateServerFromOpts(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerFromOpts", reflect.TypeOf((*MockClient)(nil).CreateServerFromOpts), ctx, opts)
}

// CreateServerSnapshot mocks base method.
func (m *MockClient) CreateServerSnapshot(ctx context.Context, serverID, snapshotName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerSnapshot", ctx, serverID, snapshotName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerSnapshot indicates an expected call of CreateServerSnapshot.
func (mr *MockClientMockRecorder) CreateServerSnapshot(ctx, serverID, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerSnapshot", reflect.TypeOf((*MockClient)(nil).CreateServerSnapshot), ctx, serverID, snapshotName)
}

// DeleteImage mocks base method.
func (m *MockClient) DeleteImage(ctx context.Context, imageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockClientMockRecorder) DeleteImage(ctx, imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockClient)(nil).DeleteImage), ctx, imageID)
}

// DeleteServer mocks base method.
func (m *MockClient) DeleteServer(ctx context.Context, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockClientMockRecorder) DeleteServer(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockClient)(nil).DeleteServer), ctx, serverID)
}

// GetImage mocks base method.
func (m *MockClient) GetImage(ctx context.Context, imageID string) (*images.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imageID)
	ret0, _ := ret[0].(*images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockClientMockRecorder) GetImage(ctx, imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockClient)(nil).GetImage), ctx, imageID)
}

// GetNetworkByName mocks base method.
func (m *MockClient) GetNetworkByName(ctx context.Context, networkName string) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByName", ctx, networkName)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByName indicates an expected call of GetNetworkByName.
func (mr *MockClientMockRecorder) GetNetworkByName(ctx, networkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByName", reflect.TypeOf((*MockClient)(nil).GetNetworkByName), ctx, networkName)
}

// GetServer mocks base method.
func (m *MockClient) GetServer(ctx context.Context, serverID string) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx, serverID)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockClientMockRecorder) GetServer(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockClient)(nil).GetServer), ctx, serverID)
}

// GetServerSecurityGroupNames mocks base method.
func (m *MockClient) GetServerSecurityGroupNames(ctx context.Context, serverID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerSecurityGroupNames", ctx, serverID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerSecurityGroupNames indicates an expected call of GetServerSecurityGroupNames.
func (mr *MockClientMockRecorder) GetServerSecurityGroupNames(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerSecurityGroupNames", reflect.TypeOf((*MockClient)(nil).GetServerSecurityGroupNames), ctx, serverID)
}

// GetServerTags mocks base method.
func (m *MockClient) GetServerTags(ctx context.Context, serverID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerTags", ctx, serverID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerTags indicates an expected call of GetServerTags.
func (mr *MockClientMockRecorder) GetServerTags(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerTags", reflect.TypeOf((*MockClient)(nil).GetServerTags), ctx, serverID)
}

// ListImages mocks base method.
func (m *MockClient) ListImages(ctx context.Context, opts *images.ListOpts) ([]images.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx, opts)
	ret0, _ := ret[0].([]images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockClientMockRecorder) ListImages(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockClient)(nil).ListImages), ctx, opts)
}

// ListPorts mocks base method.
func (m *MockClient) ListPorts(ctx context.Context) ([]ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPorts", ctx)
	ret0, _ := ret[0].([]ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPorts indicates an expected call of ListPorts.
func (mr *MockClientMockRecorder) ListPorts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPorts", reflect.TypeOf((*MockClient)(nil).ListPorts), ctx)
}

// ListServers mocks base method.
func (m *MockClient) ListServers(ctx context.Context, opts *servers.ListOpts) ([]servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", ctx, opts)
	ret0, _ := ret[0].([]servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockClientMockRecorder) ListServers(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockClient)(nil).ListServers), ctx, opts)
}

// PauseServer mocks base method.
func (m *MockClient) PauseServer(ctx context.Context, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseServer", ctx, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseServer indicates an expected call of PauseServer.
func (mr *MockClientMockRecorder) PauseServer(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseServer", reflect.TypeOf((*MockClient)(nil).PauseServer), ctx, serverID)
}

// SetServerTags mocks base method.
func (m *MockClient) SetServerTags(ctx context.Context, serverID string, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServerTags", ctx, serverID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServerTags indicates an expected call of SetServerTags.
func (mr *MockClientMockRecorder) SetServerTags(ctx, serverID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerTags", reflect.TypeOf((*MockClient)(nil).SetServerTags), ctx, serverID, tags)
}

// UnpauseServer mocks base method.
func (m *MockClient) UnpauseServer(ctx context.Context, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseServer", ctx, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpauseServer indicates an expected call of UnpauseServer.
func (mr *MockClientMockRecorder) UnpauseServer(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseServer", reflect.TypeOf((*MockClient)(nil).UnpauseServer), ctx, serverID)
}
