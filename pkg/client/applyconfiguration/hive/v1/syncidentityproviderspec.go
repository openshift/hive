// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	configv1 "github.com/openshift/api/config/v1"
	corev1 "k8s.io/api/core/v1"
)

// SyncIdentityProviderSpecApplyConfiguration represents an declarative configuration of the SyncIdentityProviderSpec type for use
// with apply.
type SyncIdentityProviderSpecApplyConfiguration struct {
	SyncIdentityProviderCommonSpecApplyConfiguration `json:",inline"`
	ClusterDeploymentRefs                            []corev1.LocalObjectReference `json:"clusterDeploymentRefs,omitempty"`
}

// SyncIdentityProviderSpecApplyConfiguration constructs an declarative configuration of the SyncIdentityProviderSpec type for use with
// apply.
func SyncIdentityProviderSpec() *SyncIdentityProviderSpecApplyConfiguration {
	return &SyncIdentityProviderSpecApplyConfiguration{}
}

// WithIdentityProviders adds the given value to the IdentityProviders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IdentityProviders field.
func (b *SyncIdentityProviderSpecApplyConfiguration) WithIdentityProviders(values ...configv1.IdentityProvider) *SyncIdentityProviderSpecApplyConfiguration {
	for i := range values {
		b.IdentityProviders = append(b.IdentityProviders, values[i])
	}
	return b
}

// WithClusterDeploymentRefs adds the given value to the ClusterDeploymentRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterDeploymentRefs field.
func (b *SyncIdentityProviderSpecApplyConfiguration) WithClusterDeploymentRefs(values ...corev1.LocalObjectReference) *SyncIdentityProviderSpecApplyConfiguration {
	for i := range values {
		b.ClusterDeploymentRefs = append(b.ClusterDeploymentRefs, values[i])
	}
	return b
}
