// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterSyncStatusApplyConfiguration represents an declarative configuration of the ClusterSyncStatus type for use
// with apply.
type ClusterSyncStatusApplyConfiguration struct {
	SyncSets            []SyncStatusApplyConfiguration           `json:"syncSets,omitempty"`
	SelectorSyncSets    []SyncStatusApplyConfiguration           `json:"selectorSyncSets,omitempty"`
	Conditions          []ClusterSyncConditionApplyConfiguration `json:"conditions,omitempty"`
	FirstSuccessTime    *v1.Time                                 `json:"firstSuccessTime,omitempty"`
	ControlledByReplica *int64                                   `json:"controlledByReplica,omitempty"`
}

// ClusterSyncStatusApplyConfiguration constructs an declarative configuration of the ClusterSyncStatus type for use with
// apply.
func ClusterSyncStatus() *ClusterSyncStatusApplyConfiguration {
	return &ClusterSyncStatusApplyConfiguration{}
}

// WithSyncSets adds the given value to the SyncSets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SyncSets field.
func (b *ClusterSyncStatusApplyConfiguration) WithSyncSets(values ...*SyncStatusApplyConfiguration) *ClusterSyncStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSyncSets")
		}
		b.SyncSets = append(b.SyncSets, *values[i])
	}
	return b
}

// WithSelectorSyncSets adds the given value to the SelectorSyncSets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SelectorSyncSets field.
func (b *ClusterSyncStatusApplyConfiguration) WithSelectorSyncSets(values ...*SyncStatusApplyConfiguration) *ClusterSyncStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSelectorSyncSets")
		}
		b.SelectorSyncSets = append(b.SelectorSyncSets, *values[i])
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ClusterSyncStatusApplyConfiguration) WithConditions(values ...*ClusterSyncConditionApplyConfiguration) *ClusterSyncStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithFirstSuccessTime sets the FirstSuccessTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FirstSuccessTime field is set to the value of the last call.
func (b *ClusterSyncStatusApplyConfiguration) WithFirstSuccessTime(value v1.Time) *ClusterSyncStatusApplyConfiguration {
	b.FirstSuccessTime = &value
	return b
}

// WithControlledByReplica sets the ControlledByReplica field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControlledByReplica field is set to the value of the last call.
func (b *ClusterSyncStatusApplyConfiguration) WithControlledByReplica(value int64) *ClusterSyncStatusApplyConfiguration {
	b.ControlledByReplica = &value
	return b
}
