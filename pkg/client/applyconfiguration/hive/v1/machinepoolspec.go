// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// MachinePoolSpecApplyConfiguration represents an declarative configuration of the MachinePoolSpec type for use
// with apply.
type MachinePoolSpecApplyConfiguration struct {
	ClusterDeploymentRef *v1.LocalObjectReference                  `json:"clusterDeploymentRef,omitempty"`
	Name                 *string                                   `json:"name,omitempty"`
	Replicas             *int64                                    `json:"replicas,omitempty"`
	Autoscaling          *MachinePoolAutoscalingApplyConfiguration `json:"autoscaling,omitempty"`
	Platform             *MachinePoolPlatformApplyConfiguration    `json:"platform,omitempty"`
	Labels               map[string]string                         `json:"labels,omitempty"`
	Taints               []v1.Taint                                `json:"taints,omitempty"`
}

// MachinePoolSpecApplyConfiguration constructs an declarative configuration of the MachinePoolSpec type for use with
// apply.
func MachinePoolSpec() *MachinePoolSpecApplyConfiguration {
	return &MachinePoolSpecApplyConfiguration{}
}

// WithClusterDeploymentRef sets the ClusterDeploymentRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterDeploymentRef field is set to the value of the last call.
func (b *MachinePoolSpecApplyConfiguration) WithClusterDeploymentRef(value v1.LocalObjectReference) *MachinePoolSpecApplyConfiguration {
	b.ClusterDeploymentRef = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *MachinePoolSpecApplyConfiguration) WithName(value string) *MachinePoolSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *MachinePoolSpecApplyConfiguration) WithReplicas(value int64) *MachinePoolSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithAutoscaling sets the Autoscaling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Autoscaling field is set to the value of the last call.
func (b *MachinePoolSpecApplyConfiguration) WithAutoscaling(value *MachinePoolAutoscalingApplyConfiguration) *MachinePoolSpecApplyConfiguration {
	b.Autoscaling = value
	return b
}

// WithPlatform sets the Platform field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Platform field is set to the value of the last call.
func (b *MachinePoolSpecApplyConfiguration) WithPlatform(value *MachinePoolPlatformApplyConfiguration) *MachinePoolSpecApplyConfiguration {
	b.Platform = value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *MachinePoolSpecApplyConfiguration) WithLabels(entries map[string]string) *MachinePoolSpecApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithTaints adds the given value to the Taints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Taints field.
func (b *MachinePoolSpecApplyConfiguration) WithTaints(values ...v1.Taint) *MachinePoolSpecApplyConfiguration {
	for i := range values {
		b.Taints = append(b.Taints, values[i])
	}
	return b
}
