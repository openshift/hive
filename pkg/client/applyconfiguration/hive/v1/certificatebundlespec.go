// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// CertificateBundleSpecApplyConfiguration represents an declarative configuration of the CertificateBundleSpec type for use
// with apply.
type CertificateBundleSpecApplyConfiguration struct {
	Name                 *string                  `json:"name,omitempty"`
	Generate             *bool                    `json:"generate,omitempty"`
	CertificateSecretRef *v1.LocalObjectReference `json:"certificateSecretRef,omitempty"`
}

// CertificateBundleSpecApplyConfiguration constructs an declarative configuration of the CertificateBundleSpec type for use with
// apply.
func CertificateBundleSpec() *CertificateBundleSpecApplyConfiguration {
	return &CertificateBundleSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *CertificateBundleSpecApplyConfiguration) WithName(value string) *CertificateBundleSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithGenerate sets the Generate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Generate field is set to the value of the last call.
func (b *CertificateBundleSpecApplyConfiguration) WithGenerate(value bool) *CertificateBundleSpecApplyConfiguration {
	b.Generate = &value
	return b
}

// WithCertificateSecretRef sets the CertificateSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertificateSecretRef field is set to the value of the last call.
func (b *CertificateBundleSpecApplyConfiguration) WithCertificateSecretRef(value v1.LocalObjectReference) *CertificateBundleSpecApplyConfiguration {
	b.CertificateSecretRef = &value
	return b
}
