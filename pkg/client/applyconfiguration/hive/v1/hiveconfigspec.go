// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	hivev1 "github.com/openshift/hive/apis/hive/v1"
	metricsconfig "github.com/openshift/hive/apis/hive/v1/metricsconfig"
	corev1 "k8s.io/api/core/v1"
)

// HiveConfigSpecApplyConfiguration represents an declarative configuration of the HiveConfigSpec type for use
// with apply.
type HiveConfigSpecApplyConfiguration struct {
	TargetNamespace                           *string                                                       `json:"targetNamespace,omitempty"`
	ManagedDomains                            []ManageDNSConfigApplyConfiguration                           `json:"managedDomains,omitempty"`
	AdditionalCertificateAuthoritiesSecretRef []corev1.LocalObjectReference                                 `json:"additionalCertificateAuthoritiesSecretRef,omitempty"`
	GlobalPullSecretRef                       *corev1.LocalObjectReference                                  `json:"globalPullSecretRef,omitempty"`
	Backup                                    *BackupConfigApplyConfiguration                               `json:"backup,omitempty"`
	FailedProvisionConfig                     *FailedProvisionConfigApplyConfiguration                      `json:"failedProvisionConfig,omitempty"`
	ServiceProviderCredentialsConfig          *ServiceProviderCredentialsApplyConfiguration                 `json:"serviceProviderCredentialsConfig,omitempty"`
	LogLevel                                  *string                                                       `json:"logLevel,omitempty"`
	SyncSetReapplyInterval                    *string                                                       `json:"syncSetReapplyInterval,omitempty"`
	MaintenanceMode                           *bool                                                         `json:"maintenanceMode,omitempty"`
	DeprovisionsDisabled                      *bool                                                         `json:"deprovisionsDisabled,omitempty"`
	DeleteProtection                          *hivev1.DeleteProtectionType                                  `json:"deleteProtection,omitempty"`
	DisabledControllers                       []string                                                      `json:"disabledControllers,omitempty"`
	ControllersConfig                         *ControllersConfigApplyConfiguration                          `json:"controllersConfig,omitempty"`
	DeploymentConfig                          *[]DeploymentConfigApplyConfiguration                         `json:"deploymentConfig,omitempty"`
	AWSPrivateLink                            *AWSPrivateLinkConfigApplyConfiguration                       `json:"awsPrivateLink,omitempty"`
	ReleaseImageVerificationConfigMapRef      *ReleaseImageVerificationConfigMapReferenceApplyConfiguration `json:"releaseImageVerificationConfigMapRef,omitempty"`
	ArgoCD                                    *ArgoCDConfigApplyConfiguration                               `json:"argoCDConfig,omitempty"`
	FeatureGates                              *FeatureGateSelectionApplyConfiguration                       `json:"featureGates,omitempty"`
	ExportMetrics                             *bool                                                         `json:"exportMetrics,omitempty"`
	MetricsConfig                             *metricsconfig.MetricsConfig                                  `json:"metricsConfig,omitempty"`
}

// HiveConfigSpecApplyConfiguration constructs an declarative configuration of the HiveConfigSpec type for use with
// apply.
func HiveConfigSpec() *HiveConfigSpecApplyConfiguration {
	return &HiveConfigSpecApplyConfiguration{}
}

// WithTargetNamespace sets the TargetNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetNamespace field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithTargetNamespace(value string) *HiveConfigSpecApplyConfiguration {
	b.TargetNamespace = &value
	return b
}

// WithManagedDomains adds the given value to the ManagedDomains field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ManagedDomains field.
func (b *HiveConfigSpecApplyConfiguration) WithManagedDomains(values ...*ManageDNSConfigApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithManagedDomains")
		}
		b.ManagedDomains = append(b.ManagedDomains, *values[i])
	}
	return b
}

// WithAdditionalCertificateAuthoritiesSecretRef adds the given value to the AdditionalCertificateAuthoritiesSecretRef field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalCertificateAuthoritiesSecretRef field.
func (b *HiveConfigSpecApplyConfiguration) WithAdditionalCertificateAuthoritiesSecretRef(values ...corev1.LocalObjectReference) *HiveConfigSpecApplyConfiguration {
	for i := range values {
		b.AdditionalCertificateAuthoritiesSecretRef = append(b.AdditionalCertificateAuthoritiesSecretRef, values[i])
	}
	return b
}

// WithGlobalPullSecretRef sets the GlobalPullSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GlobalPullSecretRef field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithGlobalPullSecretRef(value corev1.LocalObjectReference) *HiveConfigSpecApplyConfiguration {
	b.GlobalPullSecretRef = &value
	return b
}

// WithBackup sets the Backup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Backup field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithBackup(value *BackupConfigApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.Backup = value
	return b
}

// WithFailedProvisionConfig sets the FailedProvisionConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailedProvisionConfig field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithFailedProvisionConfig(value *FailedProvisionConfigApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.FailedProvisionConfig = value
	return b
}

// WithServiceProviderCredentialsConfig sets the ServiceProviderCredentialsConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceProviderCredentialsConfig field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithServiceProviderCredentialsConfig(value *ServiceProviderCredentialsApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.ServiceProviderCredentialsConfig = value
	return b
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithLogLevel(value string) *HiveConfigSpecApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithSyncSetReapplyInterval sets the SyncSetReapplyInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncSetReapplyInterval field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithSyncSetReapplyInterval(value string) *HiveConfigSpecApplyConfiguration {
	b.SyncSetReapplyInterval = &value
	return b
}

// WithMaintenanceMode sets the MaintenanceMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaintenanceMode field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithMaintenanceMode(value bool) *HiveConfigSpecApplyConfiguration {
	b.MaintenanceMode = &value
	return b
}

// WithDeprovisionsDisabled sets the DeprovisionsDisabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeprovisionsDisabled field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithDeprovisionsDisabled(value bool) *HiveConfigSpecApplyConfiguration {
	b.DeprovisionsDisabled = &value
	return b
}

// WithDeleteProtection sets the DeleteProtection field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeleteProtection field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithDeleteProtection(value hivev1.DeleteProtectionType) *HiveConfigSpecApplyConfiguration {
	b.DeleteProtection = &value
	return b
}

// WithDisabledControllers adds the given value to the DisabledControllers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DisabledControllers field.
func (b *HiveConfigSpecApplyConfiguration) WithDisabledControllers(values ...string) *HiveConfigSpecApplyConfiguration {
	for i := range values {
		b.DisabledControllers = append(b.DisabledControllers, values[i])
	}
	return b
}

// WithControllersConfig sets the ControllersConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllersConfig field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithControllersConfig(value *ControllersConfigApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.ControllersConfig = value
	return b
}

func (b *HiveConfigSpecApplyConfiguration) ensureDeploymentConfigApplyConfigurationExists() {
	if b.DeploymentConfig == nil {
		b.DeploymentConfig = &[]DeploymentConfigApplyConfiguration{}
	}
}

// WithDeploymentConfig adds the given value to the DeploymentConfig field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DeploymentConfig field.
func (b *HiveConfigSpecApplyConfiguration) WithDeploymentConfig(values ...*DeploymentConfigApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.ensureDeploymentConfigApplyConfigurationExists()
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDeploymentConfig")
		}
		*b.DeploymentConfig = append(*b.DeploymentConfig, *values[i])
	}
	return b
}

// WithAWSPrivateLink sets the AWSPrivateLink field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AWSPrivateLink field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithAWSPrivateLink(value *AWSPrivateLinkConfigApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.AWSPrivateLink = value
	return b
}

// WithReleaseImageVerificationConfigMapRef sets the ReleaseImageVerificationConfigMapRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReleaseImageVerificationConfigMapRef field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithReleaseImageVerificationConfigMapRef(value *ReleaseImageVerificationConfigMapReferenceApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.ReleaseImageVerificationConfigMapRef = value
	return b
}

// WithArgoCD sets the ArgoCD field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ArgoCD field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithArgoCD(value *ArgoCDConfigApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.ArgoCD = value
	return b
}

// WithFeatureGates sets the FeatureGates field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FeatureGates field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithFeatureGates(value *FeatureGateSelectionApplyConfiguration) *HiveConfigSpecApplyConfiguration {
	b.FeatureGates = value
	return b
}

// WithExportMetrics sets the ExportMetrics field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExportMetrics field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithExportMetrics(value bool) *HiveConfigSpecApplyConfiguration {
	b.ExportMetrics = &value
	return b
}

// WithMetricsConfig sets the MetricsConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MetricsConfig field is set to the value of the last call.
func (b *HiveConfigSpecApplyConfiguration) WithMetricsConfig(value metricsconfig.MetricsConfig) *HiveConfigSpecApplyConfiguration {
	b.MetricsConfig = &value
	return b
}
