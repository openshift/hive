// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apishivev1 "github.com/openshift/hive/apis/hive/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DNSZoneStatusApplyConfiguration represents an declarative configuration of the DNSZoneStatus type for use
// with apply.
type DNSZoneStatusApplyConfiguration struct {
	LastSyncTimestamp  *v1.Time                             `json:"lastSyncTimestamp,omitempty"`
	LastSyncGeneration *int64                               `json:"lastSyncGeneration,omitempty"`
	NameServers        []string                             `json:"nameServers,omitempty"`
	AWS                *AWSDNSZoneStatusApplyConfiguration  `json:"aws,omitempty"`
	GCP                *GCPDNSZoneStatusApplyConfiguration  `json:"gcp,omitempty"`
	Azure              *apishivev1.AzureDNSZoneStatus       `json:"azure,omitempty"`
	Conditions         []DNSZoneConditionApplyConfiguration `json:"conditions,omitempty"`
}

// DNSZoneStatusApplyConfiguration constructs an declarative configuration of the DNSZoneStatus type for use with
// apply.
func DNSZoneStatus() *DNSZoneStatusApplyConfiguration {
	return &DNSZoneStatusApplyConfiguration{}
}

// WithLastSyncTimestamp sets the LastSyncTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSyncTimestamp field is set to the value of the last call.
func (b *DNSZoneStatusApplyConfiguration) WithLastSyncTimestamp(value v1.Time) *DNSZoneStatusApplyConfiguration {
	b.LastSyncTimestamp = &value
	return b
}

// WithLastSyncGeneration sets the LastSyncGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSyncGeneration field is set to the value of the last call.
func (b *DNSZoneStatusApplyConfiguration) WithLastSyncGeneration(value int64) *DNSZoneStatusApplyConfiguration {
	b.LastSyncGeneration = &value
	return b
}

// WithNameServers adds the given value to the NameServers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NameServers field.
func (b *DNSZoneStatusApplyConfiguration) WithNameServers(values ...string) *DNSZoneStatusApplyConfiguration {
	for i := range values {
		b.NameServers = append(b.NameServers, values[i])
	}
	return b
}

// WithAWS sets the AWS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AWS field is set to the value of the last call.
func (b *DNSZoneStatusApplyConfiguration) WithAWS(value *AWSDNSZoneStatusApplyConfiguration) *DNSZoneStatusApplyConfiguration {
	b.AWS = value
	return b
}

// WithGCP sets the GCP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GCP field is set to the value of the last call.
func (b *DNSZoneStatusApplyConfiguration) WithGCP(value *GCPDNSZoneStatusApplyConfiguration) *DNSZoneStatusApplyConfiguration {
	b.GCP = value
	return b
}

// WithAzure sets the Azure field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Azure field is set to the value of the last call.
func (b *DNSZoneStatusApplyConfiguration) WithAzure(value apishivev1.AzureDNSZoneStatus) *DNSZoneStatusApplyConfiguration {
	b.Azure = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *DNSZoneStatusApplyConfiguration) WithConditions(values ...*DNSZoneConditionApplyConfiguration) *DNSZoneStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
