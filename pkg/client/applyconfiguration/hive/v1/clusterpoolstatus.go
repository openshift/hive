// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ClusterPoolStatusApplyConfiguration represents an declarative configuration of the ClusterPoolStatus type for use
// with apply.
type ClusterPoolStatusApplyConfiguration struct {
	Size       *int32                                   `json:"size,omitempty"`
	Standby    *int32                                   `json:"standby,omitempty"`
	Ready      *int32                                   `json:"ready,omitempty"`
	Conditions []ClusterPoolConditionApplyConfiguration `json:"conditions,omitempty"`
}

// ClusterPoolStatusApplyConfiguration constructs an declarative configuration of the ClusterPoolStatus type for use with
// apply.
func ClusterPoolStatus() *ClusterPoolStatusApplyConfiguration {
	return &ClusterPoolStatusApplyConfiguration{}
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *ClusterPoolStatusApplyConfiguration) WithSize(value int32) *ClusterPoolStatusApplyConfiguration {
	b.Size = &value
	return b
}

// WithStandby sets the Standby field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Standby field is set to the value of the last call.
func (b *ClusterPoolStatusApplyConfiguration) WithStandby(value int32) *ClusterPoolStatusApplyConfiguration {
	b.Standby = &value
	return b
}

// WithReady sets the Ready field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ready field is set to the value of the last call.
func (b *ClusterPoolStatusApplyConfiguration) WithReady(value int32) *ClusterPoolStatusApplyConfiguration {
	b.Ready = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ClusterPoolStatusApplyConfiguration) WithConditions(values ...*ClusterPoolConditionApplyConfiguration) *ClusterPoolStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
