// Code generated by go-bindata.
// sources:
// config/hiveadmission/apiservice.yaml
// config/hiveadmission/clusterdeployment-webhook.yaml
// config/hiveadmission/clusterimageset-webhook.yaml
// config/hiveadmission/daemonset.yaml
// config/hiveadmission/dnszones-webhook.yaml
// config/hiveadmission/hiveadmission_rbac_role.yaml
// config/hiveadmission/hiveadmission_rbac_role_binding.yaml
// config/hiveadmission/service-account.yaml
// config/hiveadmission/service.yaml
// config/crds/hive_v1alpha1_clusterdeployment.yaml
// config/crds/hive_v1alpha1_clusterimageset.yaml
// config/crds/hive_v1alpha1_dnszone.yaml
// config/crds/hive_v1alpha1_hiveconfig.yaml
// config/crds/hive_v1alpha1_selectorsyncidentityprovider.yaml
// config/crds/hive_v1alpha1_selectorsyncset.yaml
// config/crds/hive_v1alpha1_syncidentityprovider.yaml
// config/crds/hive_v1alpha1_syncset.yaml
// config/manager/deployment.yaml
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configHiveadmissionApiserviceYaml = []byte(`---
# register as aggregated apiserver; this has a number of benefits:
#
# - allows other kubernetes components to talk to the the admission webhook using the ` + "`" + `kubernetes.default.svc` + "`" + ` service
# - allows other kubernetes components to use their in-cluster credentials to communicate with the webhook
# - allows you to test the webhook using kubectl
# - allows you to govern access to the webhook using RBAC
# - prevents other extension API servers from leaking their service account tokens to the webhook
#
# for more information, see: https://kubernetes.io/blog/2018/01/extensible-admission-is-beta
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.admission.hive.openshift.io
  annotations:
    service.alpha.openshift.io/inject-cabundle: "true"
spec:
  group: admission.hive.openshift.io
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: hiveadmission
    namespace: hive
  version: v1alpha1
`)

func configHiveadmissionApiserviceYamlBytes() ([]byte, error) {
	return _configHiveadmissionApiserviceYaml, nil
}

func configHiveadmissionApiserviceYaml() (*asset, error) {
	bytes, err := configHiveadmissionApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionClusterdeploymentWebhookYaml = []byte(`---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: clusterdeployments.admission.hive.openshift.io
webhooks:
- name: clusterdeployments.admission.hive.openshift.io
  clientConfig:
    service:
      # reach the webhook via the registered aggregated API
      namespace: default
      name: kubernetes
      path: /apis/admission.hive.openshift.io/v1alpha1/clusterdeployments
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - hive.openshift.io
    apiVersions:
    - v1alpha1
    resources:
    - clusterdeployments
  failurePolicy: Fail
`)

func configHiveadmissionClusterdeploymentWebhookYamlBytes() ([]byte, error) {
	return _configHiveadmissionClusterdeploymentWebhookYaml, nil
}

func configHiveadmissionClusterdeploymentWebhookYaml() (*asset, error) {
	bytes, err := configHiveadmissionClusterdeploymentWebhookYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/clusterdeployment-webhook.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionClusterimagesetWebhookYaml = []byte(`---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: clusterdeployments.admission.hive.openshift.io
webhooks:
- name: clusterdeployments.admission.hive.openshift.io
  clientConfig:
    service:
      # reach the webhook via the registered aggregated API
      namespace: default
      name: kubernetes
      path: /apis/admission.hive.openshift.io/v1alpha1/clusterimagesets
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - hive.openshift.io
    apiVersions:
    - v1alpha1
    resources:
    - clusterimagesets
  failurePolicy: Fail
`)

func configHiveadmissionClusterimagesetWebhookYamlBytes() ([]byte, error) {
	return _configHiveadmissionClusterimagesetWebhookYaml, nil
}

func configHiveadmissionClusterimagesetWebhookYaml() (*asset, error) {
	bytes, err := configHiveadmissionClusterimagesetWebhookYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/clusterimageset-webhook.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionDaemonsetYaml = []byte(`---
# to create the namespace-reservation-server
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: hive
  name: hiveadmission
  labels:
    app: hiveadmission
    hiveadmission: "true"
spec:
  selector:
    matchLabels:
      app: hiveadmission
      hiveadmission: "true"
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      name: hiveadmission
      labels:
        app: hiveadmission
        hiveadmission: "true"
    spec:
      serviceAccountName: hiveadmission
      containers:
      - name: hiveadmission
        image: registry.svc.ci.openshift.org/openshift/hive-v4.0:hive
        imagePullPolicy: Always
        command:
        - "/opt/services/hiveadmission"
        - "--secure-port=9443"
        - "--audit-log-path=-"
        - "--tls-cert-file=/var/serving-cert/tls.crt"
        - "--tls-private-key-file=/var/serving-cert/tls.key"
        - "--v=8"
        ports:
        - containerPort: 9443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /healthz
            port: 9443
            scheme: HTTPS
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: hiveadmission-serving-cert
`)

func configHiveadmissionDaemonsetYamlBytes() ([]byte, error) {
	return _configHiveadmissionDaemonsetYaml, nil
}

func configHiveadmissionDaemonsetYaml() (*asset, error) {
	bytes, err := configHiveadmissionDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/daemonset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionDnszonesWebhookYaml = []byte(`---
# register to intercept DNSZone object creates and updates
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: dnszones.admission.hive.openshift.io
webhooks:
- name: dnszones.admission.hive.openshift.io
  clientConfig:
    service:
      # reach the webhook via the registered aggregated API
      namespace: default
      name: kubernetes
      path: /apis/admission.hive.openshift.io/v1alpha1/dnszones
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - hive.openshift.io
    apiVersions:
    - v1alpha1
    resources:
    - dnszones
  failurePolicy: Fail
`)

func configHiveadmissionDnszonesWebhookYamlBytes() ([]byte, error) {
	return _configHiveadmissionDnszonesWebhookYaml, nil
}

func configHiveadmissionDnszonesWebhookYaml() (*asset, error) {
	bytes, err := configHiveadmissionDnszonesWebhookYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/dnszones-webhook.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionHiveadmission_rbac_roleYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
  name: system:openshift:hive:hiveadmission
rules:
- apiGroups:
  - admission.hive.openshift.io
  resources:
  - dnszones
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create

`)

func configHiveadmissionHiveadmission_rbac_roleYamlBytes() ([]byte, error) {
	return _configHiveadmissionHiveadmission_rbac_roleYaml, nil
}

func configHiveadmissionHiveadmission_rbac_roleYaml() (*asset, error) {
	bytes, err := configHiveadmissionHiveadmission_rbac_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/hiveadmission_rbac_role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionHiveadmission_rbac_role_bindingYaml = []byte(`apiVersion: v1
kind: List
items:
# to delegate authentication and authorization
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: auth-delegator-hiveadmission
  roleRef:
    kind: ClusterRole
    apiGroup: rbac.authorization.k8s.io
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    namespace: hive
    name: hiveadmission


# to let the admission server read the namespace reservations
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: hiveadmission-hive-hiveadmission
  roleRef:
    kind: ClusterRole
    apiGroup: rbac.authorization.k8s.io
    name: system:openshift:hive:hiveadmission
  subjects:
  - kind: ServiceAccount
    namespace: hive
    name: hiveadmission

# to read the config for terminating authentication
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    namespace: kube-system
    name: extension-server-authentication-reader-hiveadmission
  roleRef:
    kind: Role
    apiGroup: rbac.authorization.k8s.io
    name: extension-apiserver-authentication-reader
  subjects:
  - kind: ServiceAccount
    namespace: hive
    name: hiveadmission
`)

func configHiveadmissionHiveadmission_rbac_role_bindingYamlBytes() ([]byte, error) {
	return _configHiveadmissionHiveadmission_rbac_role_bindingYaml, nil
}

func configHiveadmissionHiveadmission_rbac_role_bindingYaml() (*asset, error) {
	bytes, err := configHiveadmissionHiveadmission_rbac_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/hiveadmission_rbac_role_binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionServiceAccountYaml = []byte(`---
# to be able to assign powers to the hiveadmission process
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: hive
  name: hiveadmission
`)

func configHiveadmissionServiceAccountYamlBytes() ([]byte, error) {
	return _configHiveadmissionServiceAccountYaml, nil
}

func configHiveadmissionServiceAccountYaml() (*asset, error) {
	bytes, err := configHiveadmissionServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/service-account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHiveadmissionServiceYaml = []byte(`---
apiVersion: v1
kind: Service
metadata:
  namespace: hive
  name: hiveadmission
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: hiveadmission-serving-cert
spec:
  selector:
    app: hiveadmission
  ports:
  - port: 443
    targetPort: 9443
`)

func configHiveadmissionServiceYamlBytes() ([]byte, error) {
	return _configHiveadmissionServiceYaml, nil
}

func configHiveadmissionServiceYaml() (*asset, error) {
	bytes, err := configHiveadmissionServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/hiveadmission/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_clusterdeploymentYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: clusterdeployments.hive.openshift.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.baseDomain
    name: BaseDomain
    type: string
  - JSONPath: .status.installed
    name: Installed
    type: boolean
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  group: hive.openshift.io
  names:
    kind: ClusterDeployment
    plural: clusterdeployments
    shortNames:
    - cd
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            baseDomain:
              description: BaseDomain is the base domain to which the cluster should
                belong.
              type: string
            clusterName:
              description: ClusterName is the friendly name of the cluster. It is
                used for subdomains, some resource tagging, and other instances where
                a friendly name for the cluster is useful.
              type: string
            compute:
              description: Compute is the list of MachinePools containing compute
                nodes that need to be installed.
              items:
                properties:
                  labels:
                    description: Map of label string keys and values that will be
                      applied to the created MachineSet's MachineSpec. This list will
                      overwrite any modifications made to Node labels on an ongoing
                      basis.
                    type: object
                  name:
                    description: Name is the name of the machine pool.
                    type: string
                  platform:
                    description: Platform is configuration for machine pool specific
                      to the platfrom.
                    properties:
                      aws:
                        description: AWS is the configuration used when installing
                          on AWS.
                        properties:
                          rootVolume:
                            description: EC2RootVolume defines the storage for ec2
                              instance.
                            properties:
                              iops:
                                description: IOPS defines the iops for the instance.
                                format: int64
                                type: integer
                              size:
                                description: Size defines the size of the instance.
                                format: int64
                                type: integer
                              type:
                                description: Type defines the type of the instance.
                                type: string
                            required:
                            - iops
                            - size
                            - type
                            type: object
                          type:
                            description: InstanceType defines the ec2 instance type.
                              eg. m4-large
                            type: string
                          zones:
                            description: Zones is list of availability zones that
                              can be used.
                            items:
                              type: string
                            type: array
                        required:
                        - type
                        - rootVolume
                        type: object
                      libvirt:
                        description: Libvirt is the configuration used when installing
                          on libvirt.
                        properties:
                          image:
                            description: Image is the URL to the OS image. E.g. "http://aos-ostree.rhev-ci-vms.eng.rdu2.redhat.com/rhcos/images/cloud/latest/rhcos-qemu.qcow2.gz"
                            type: string
                          imagePool:
                            description: ImagePool is the name of the libvirt storage
                              pool to which the storage volume containing the OS image
                              belongs.
                            type: string
                          imageVolume:
                            description: ImageVolume is the name of the libvirt storage
                              volume containing the OS image.
                            type: string
                        required:
                        - image
                        type: object
                      openstack:
                        description: OpenStack is the configuration used when installing
                          on OpenStack.
                        properties:
                          rootVolume:
                            description: OpenStackRootVolume defines the storage for
                              Nova instance.
                            properties:
                              iops:
                                description: IOPS defines the iops for the instance.
                                format: int64
                                type: integer
                              size:
                                description: Size defines the size of the instance.
                                format: int64
                                type: integer
                              type:
                                description: Type defines the type of the instance.
                                type: string
                            required:
                            - iops
                            - size
                            - type
                            type: object
                          type:
                            description: FlavorName defines the OpenStack Nova flavor.
                              eg. m1.large
                            type: string
                        required:
                        - type
                        - rootVolume
                        type: object
                    type: object
                  replicas:
                    description: Replicas is the count of machines for this machine
                      pool. Default is 1.
                    format: int64
                    type: integer
                  taints:
                    description: List of taints that will be applied to the created
                      MachineSet's MachineSpec. This list will overwrite any modifications
                      made to Node taints on an ongoing basis.
                    items:
                      type: object
                    type: array
                required:
                - name
                - replicas
                - platform
                type: object
              type: array
            controlPlane:
              description: ControlPlane is the MachinePool containing control plane
                nodes that need to be installed.
              properties:
                labels:
                  description: Map of label string keys and values that will be applied
                    to the created MachineSet's MachineSpec. This list will overwrite
                    any modifications made to Node labels on an ongoing basis.
                  type: object
                name:
                  description: Name is the name of the machine pool.
                  type: string
                platform:
                  description: Platform is configuration for machine pool specific
                    to the platfrom.
                  properties:
                    aws:
                      description: AWS is the configuration used when installing on
                        AWS.
                      properties:
                        rootVolume:
                          description: EC2RootVolume defines the storage for ec2 instance.
                          properties:
                            iops:
                              description: IOPS defines the iops for the instance.
                              format: int64
                              type: integer
                            size:
                              description: Size defines the size of the instance.
                              format: int64
                              type: integer
                            type:
                              description: Type defines the type of the instance.
                              type: string
                          required:
                          - iops
                          - size
                          - type
                          type: object
                        type:
                          description: InstanceType defines the ec2 instance type.
                            eg. m4-large
                          type: string
                        zones:
                          description: Zones is list of availability zones that can
                            be used.
                          items:
                            type: string
                          type: array
                      required:
                      - type
                      - rootVolume
                      type: object
                    libvirt:
                      description: Libvirt is the configuration used when installing
                        on libvirt.
                      properties:
                        image:
                          description: Image is the URL to the OS image. E.g. "http://aos-ostree.rhev-ci-vms.eng.rdu2.redhat.com/rhcos/images/cloud/latest/rhcos-qemu.qcow2.gz"
                          type: string
                        imagePool:
                          description: ImagePool is the name of the libvirt storage
                            pool to which the storage volume containing the OS image
                            belongs.
                          type: string
                        imageVolume:
                          description: ImageVolume is the name of the libvirt storage
                            volume containing the OS image.
                          type: string
                      required:
                      - image
                      type: object
                    openstack:
                      description: OpenStack is the configuration used when installing
                        on OpenStack.
                      properties:
                        rootVolume:
                          description: OpenStackRootVolume defines the storage for
                            Nova instance.
                          properties:
                            iops:
                              description: IOPS defines the iops for the instance.
                              format: int64
                              type: integer
                            size:
                              description: Size defines the size of the instance.
                              format: int64
                              type: integer
                            type:
                              description: Type defines the type of the instance.
                              type: string
                          required:
                          - iops
                          - size
                          - type
                          type: object
                        type:
                          description: FlavorName defines the OpenStack Nova flavor.
                            eg. m1.large
                          type: string
                      required:
                      - type
                      - rootVolume
                      type: object
                  type: object
                replicas:
                  description: Replicas is the count of machines for this machine
                    pool. Default is 1.
                  format: int64
                  type: integer
                taints:
                  description: List of taints that will be applied to the created
                    MachineSet's MachineSpec. This list will overwrite any modifications
                    made to Node taints on an ongoing basis.
                  items:
                    type: object
                  type: array
              required:
              - name
              - replicas
              - platform
              type: object
            imageSet:
              description: ImageSet is a reference to a ClusterImageSet. If values
                are specified for Images, those will take precedence over the ones
                from the ClusterImageSet.
              properties:
                name:
                  description: Name is the name of the ClusterImageSet that this refers
                    to
                  type: string
              required:
              - name
              type: object
            images:
              description: Images allows overriding the default images used to provision
                and manage the cluster.
              properties:
                hiveImage:
                  description: HiveImage is the image used in the sidecar container
                    to manage execution of openshift-install.
                  type: string
                hiveImagePullPolicy:
                  description: HiveImagePullPolicy is the pull policy for the installer
                    image.
                  type: string
                installerImage:
                  description: InstallerImage is the image containing the openshift-install
                    binary that will be used to install.
                  type: string
                installerImagePullPolicy:
                  description: InstallerImagePullPolicy is the pull policy for the
                    installer image.
                  type: string
                releaseImage:
                  description: ReleaseImage is the image containing metadata for all
                    components that run in the cluster, and is the primary and best
                    way to specify what specific version of OpenShift you wish to
                    install.
                  type: string
              type: object
            networking:
              description: Networking defines the pod network provider in the cluster.
              properties:
                clusterNetworks:
                  description: ClusterNetworks is the IP address space from which
                    to assign pod IPs.
                  items:
                    properties:
                      cidr:
                        type: string
                      hostSubnetLength:
                        format: int32
                        type: integer
                    required:
                    - cidr
                    - hostSubnetLength
                    type: object
                  type: array
                machineCIDR:
                  description: MachineCIDR is the IP address space from which to assign
                    machine IPs.
                  type: string
                serviceCIDR:
                  description: ServiceCIDR is the IP address space from which to assign
                    service IPs.
                  type: string
                type:
                  description: Type is the network type to install
                  type: string
              required:
              - machineCIDR
              - type
              - serviceCIDR
              type: object
            platform:
              description: Platform is the configuration for the specific platform
                upon which to perform the installation.
              properties:
                aws:
                  description: AWS is the configuration used when installing on AWS.
                  properties:
                    defaultMachinePlatform:
                      description: DefaultMachinePlatform is the default configuration
                        used when installing on AWS for machine pools which do not
                        define their own platform configuration.
                      properties:
                        rootVolume:
                          description: EC2RootVolume defines the storage for ec2 instance.
                          properties:
                            iops:
                              description: IOPS defines the iops for the instance.
                              format: int64
                              type: integer
                            size:
                              description: Size defines the size of the instance.
                              format: int64
                              type: integer
                            type:
                              description: Type defines the type of the instance.
                              type: string
                          required:
                          - iops
                          - size
                          - type
                          type: object
                        type:
                          description: InstanceType defines the ec2 instance type.
                            eg. m4-large
                          type: string
                        zones:
                          description: Zones is list of availability zones that can
                            be used.
                          items:
                            type: string
                          type: array
                      required:
                      - type
                      - rootVolume
                      type: object
                    region:
                      description: Region specifies the AWS region where the cluster
                        will be created.
                      type: string
                    userTags:
                      description: UserTags specifies additional tags for AWS resources
                        created for the cluster.
                      type: object
                  required:
                  - region
                  type: object
                libvirt:
                  description: Libvirt is the configuration used when installing on
                    libvirt.
                  properties:
                    URI:
                      description: URI is the identifier for the libvirtd connection.  It
                        must be reachable from both the host (where the installer
                        is run) and the cluster (where the cluster-API controller
                        pod will be running).
                      type: string
                    defaultMachinePlatform:
                      description: DefaultMachinePlatform is the default configuration
                        used when installing on AWS for machine pools which do not
                        define their own platform configuration.
                      properties:
                        image:
                          description: Image is the URL to the OS image. E.g. "http://aos-ostree.rhev-ci-vms.eng.rdu2.redhat.com/rhcos/images/cloud/latest/rhcos-qemu.qcow2.gz"
                          type: string
                        imagePool:
                          description: ImagePool is the name of the libvirt storage
                            pool to which the storage volume containing the OS image
                            belongs.
                          type: string
                        imageVolume:
                          description: ImageVolume is the name of the libvirt storage
                            volume containing the OS image.
                          type: string
                      required:
                      - image
                      type: object
                    masterIPs:
                      description: MasterIPs
                      items:
                        format: byte
                        type: string
                      type: array
                    network:
                      description: Network
                      properties:
                        if:
                          description: IfName is the name of the network interface.
                          type: string
                        ipRange:
                          description: IPRange is the range of IPs to use.
                          type: string
                        name:
                          description: Name is the name of the nework.
                          type: string
                      required:
                      - name
                      - if
                      - ipRange
                      type: object
                  required:
                  - URI
                  - network
                  - masterIPs
                  type: object
              type: object
            platformSecrets:
              description: PlatformSecrets contains credentials and secrets for the
                cluster infrastructure.
              properties:
                aws:
                  properties:
                    credentials:
                      description: Credentials refers to a secret that contains the
                        AWS account access credentials.
                      type: object
                  required:
                  - credentials
                  type: object
              type: object
            preserveOnDelete:
              description: PreserveOnDelete allows the user to disconnect a cluster
                from Hive without deprovisioning it
              type: boolean
            pullSecret:
              description: PullSecret is the reference to the secret to use when pulling
                images.
              type: object
            sshKey:
              description: SSHKey is the reference to the secret that contains a public
                key to use for access to compute instances.
              type: object
          required:
          - clusterName
          - baseDomain
          - networking
          - controlPlane
          - compute
          - platform
          - pullSecret
          - platformSecrets
          type: object
        status:
          properties:
            adminKubeconfigSecret:
              description: AdminKubeconfigSecret references the secret containing
                the admin kubeconfig for this cluster.
              type: object
            adminPasswordSecret:
              description: AdminPasswordSecret references the secret containing the
                admin username/password which can be used to login to this cluster.
              type: object
            apiURL:
              description: APIURL is the URL where the cluster's API can be accessed.
              type: string
            clusterID:
              description: ClusterID is a globally unique identifier for this cluster
                generated during installation. Used for reporting metrics among other
                places.
              type: string
            clusterVersionStatus:
              description: ClusterVersionStatus will hold a copy of the remote cluster's
                ClusterVersion.Status
              properties:
                availableUpdates:
                  description: availableUpdates contains the list of updates that
                    are appropriate for this cluster. This list may be empty if no
                    updates are recommended, if the update service is unavailable,
                    or if an invalid channel has been specified. +nullable
                  items:
                    properties:
                      image:
                        description: image is a container image location that contains
                          the update. When this field is part of spec, image is optional
                          if version is specified and the availableUpdates field contains
                          a matching version.
                        type: string
                      version:
                        description: version is a semantic versioning identifying
                          the update version. When this field is part of spec, version
                          is optional if image is specified.
                        type: string
                    type: object
                  type: array
                conditions:
                  description: conditions provides information about the cluster version.
                    The condition "Available" is set to true if the desiredUpdate
                    has been reached. The condition "Progressing" is set to true if
                    an update is being applied. The condition "Failing" is set to
                    true if an update is currently blocked by a temporary or permanent
                    error. Conditions are only valid for the current desiredUpdate
                    when metadata.generation is equal to status.generation.
                  items:
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the time of the last update
                          to the current status object.
                        format: date-time
                        type: string
                      message:
                        description: message provides additional information about
                          the current condition. This is only to be consumed by humans.
                        type: string
                      reason:
                        description: reason is the reason for the condition's last
                          transition.  Reasons are CamelCase
                        type: string
                      status:
                        description: status of the condition, one of True, False,
                          Unknown.
                        type: string
                      type:
                        description: type specifies the state of the operator's reconciliation
                          functionality.
                        type: string
                    required:
                    - type
                    - status
                    - lastTransitionTime
                    type: object
                  type: array
                desired:
                  description: desired is the version that the cluster is reconciling
                    towards. If the cluster is not yet fully initialized desired will
                    be set with the information available, which may be an image or
                    a tag.
                  properties:
                    image:
                      description: image is a container image location that contains
                        the update. When this field is part of spec, image is optional
                        if version is specified and the availableUpdates field contains
                        a matching version.
                      type: string
                    version:
                      description: version is a semantic versioning identifying the
                        update version. When this field is part of spec, version is
                        optional if image is specified.
                      type: string
                  type: object
                history:
                  description: history contains a list of the most recent versions
                    applied to the cluster. This value may be empty during cluster
                    startup, and then will be updated when a new update is being applied.
                    The newest update is first in the list and it is ordered by recency.
                    Updates in the history have state Completed if the rollout completed
                    - if an update was failing or halfway applied the state will be
                    Partial. Only a limited amount of update history is preserved.
                  items:
                    properties:
                      completionTime:
                        description: completionTime, if set, is when the update was
                          fully applied. The update that is currently being applied
                          will have a null completion time. Completion time will always
                          be set for entries that are not the current update (usually
                          to the started time of the next update). +nullable
                        format: date-time
                        type: string
                      image:
                        description: image is a container image location that contains
                          the update. This value is always populated.
                        type: string
                      startedTime:
                        description: startedTime is the time at which the update was
                          started.
                        format: date-time
                        type: string
                      state:
                        description: state reflects whether the update was fully applied.
                          The Partial state indicates the update is not fully applied,
                          while the Completed state indicates the update was successfully
                          rolled out at least once (all parts of the update successfully
                          applied).
                        type: string
                      version:
                        description: version is a semantic versioning identifying
                          the update version. If the requested image does not define
                          a version, or if a failure occurs retrieving the image,
                          this value may be empty.
                        type: string
                    required:
                    - state
                    - startedTime
                    - completionTime
                    - image
                    type: object
                  type: array
                observedGeneration:
                  description: observedGeneration reports which version of the spec
                    is being synced. If this value is not equal to metadata.generation,
                    then the desired and conditions fields may represent from a previous
                    version.
                  format: int64
                  type: integer
                versionHash:
                  description: versionHash is a fingerprint of the content that the
                    cluster will be updated with. It is used by the operator to avoid
                    unnecessary work and is for internal use only.
                  type: string
              required:
              - desired
              - observedGeneration
              - versionHash
              - availableUpdates
              type: object
            conditions:
              description: Conditions includes more detailed status for the cluster
                deployment
              items:
                properties:
                  lastProbeTime:
                    description: LastProbeTime is the last time we probed the condition.
                    format: date-time
                    type: string
                  lastTransitionTime:
                    description: LastTransitionTime is the last time the condition
                      transitioned from one status to another.
                    format: date-time
                    type: string
                  message:
                    description: Message is a human-readable message indicating details
                      about last transition.
                    type: string
                  reason:
                    description: Reason is a unique, one-word, CamelCase reason for
                      the condition's last transition.
                    type: string
                  status:
                    description: Status is the status of the condition.
                    type: string
                  type:
                    description: Type is the type of the condition.
                    type: string
                required:
                - type
                - status
                type: object
              type: array
            federated:
              description: Federated is true if the cluster deployment has been federated
                with the host cluster.
              type: boolean
            federatedClusterRef:
              description: FederatedClusterRef is the reference to the federated cluster
                resource associated with this ClusterDeployment.
              type: object
            infraID:
              description: InfraID is an identifier for this cluster generated during
                installation and used for tagging/naming resources in cloud providers.
              type: string
            installed:
              description: Installed is true if the installer job has successfully
                completed for this cluster.
              type: boolean
            installerImage:
              description: InstallerImage is the name of the installer image to use
                when installing the target cluster
              type: string
            selectorSyncSetStatus:
              description: SelectorSyncSetStatus is the list of status for SelectorSyncSets
                which apply to the cluster deployment.
              items:
                properties:
                  conditions:
                    description: Conditions is the list of SyncConditions used to
                      indicate UnknownObject when a resource type cannot be determined
                      from a SyncSet resource.
                    items:
                      properties:
                        lastProbeTime:
                          description: LastProbeTime is the last time we probed the
                            condition.
                          format: date-time
                          type: string
                        lastTransitionTime:
                          description: LastTransitionTime is the last time the condition
                            transitioned from one status to another.
                          format: date-time
                          type: string
                        message:
                          description: Message is a human-readable message indicating
                            details about last transition.
                          type: string
                        reason:
                          description: Reason is a unique, one-word, CamelCase reason
                            for the condition's last transition.
                          type: string
                        status:
                          description: Status is the status of the condition.
                          type: string
                        type:
                          description: Type is the type of the condition.
                          type: string
                      required:
                      - type
                      - status
                      type: object
                    type: array
                  name:
                    description: Name is the name of the SyncSet.
                    type: string
                  patches:
                    description: Patches is the list of SyncStatus for patches that
                      have been applied.
                    items:
                      properties:
                        apiVersion:
                          description: APIVersion is the Group and Version of the
                            object that was synced or patched.
                          type: string
                        conditions:
                          description: Conditions is the list of conditions indicating
                            success or failure of object create, update and delete
                            as well as patch application.
                          items:
                            properties:
                              lastProbeTime:
                                description: LastProbeTime is the last time we probed
                                  the condition.
                                format: date-time
                                type: string
                              lastTransitionTime:
                                description: LastTransitionTime is the last time the
                                  condition transitioned from one status to another.
                                format: date-time
                                type: string
                              message:
                                description: Message is a human-readable message indicating
                                  details about last transition.
                                type: string
                              reason:
                                description: Reason is a unique, one-word, CamelCase
                                  reason for the condition's last transition.
                                type: string
                              status:
                                description: Status is the status of the condition.
                                type: string
                              type:
                                description: Type is the type of the condition.
                                type: string
                            required:
                            - type
                            - status
                            type: object
                          type: array
                        hash:
                          description: Hash is the unique md5 hash of the resource
                            or patch.
                          format: byte
                          type: string
                        kind:
                          description: Kind is the Kind of the object that was synced
                            or patched.
                          type: string
                        name:
                          description: Name is the name of the object that was synced
                            or patched.
                          type: string
                        namespace:
                          description: Namespace is the Namespace of the object that
                            was synced or patched.
                          type: string
                      required:
                      - apiVersion
                      - kind
                      - name
                      - namespace
                      - hash
                      - conditions
                      type: object
                    type: array
                  resources:
                    description: Resources is the list of SyncStatus for objects that
                      have been synced.
                    items:
                      properties:
                        apiVersion:
                          description: APIVersion is the Group and Version of the
                            object that was synced or patched.
                          type: string
                        conditions:
                          description: Conditions is the list of conditions indicating
                            success or failure of object create, update and delete
                            as well as patch application.
                          items:
                            properties:
                              lastProbeTime:
                                description: LastProbeTime is the last time we probed
                                  the condition.
                                format: date-time
                                type: string
                              lastTransitionTime:
                                description: LastTransitionTime is the last time the
                                  condition transitioned from one status to another.
                                format: date-time
                                type: string
                              message:
                                description: Message is a human-readable message indicating
                                  details about last transition.
                                type: string
                              reason:
                                description: Reason is a unique, one-word, CamelCase
                                  reason for the condition's last transition.
                                type: string
                              status:
                                description: Status is the status of the condition.
                                type: string
                              type:
                                description: Type is the type of the condition.
                                type: string
                            required:
                            - type
                            - status
                            type: object
                          type: array
                        hash:
                          description: Hash is the unique md5 hash of the resource
                            or patch.
                          format: byte
                          type: string
                        kind:
                          description: Kind is the Kind of the object that was synced
                            or patched.
                          type: string
                        name:
                          description: Name is the name of the object that was synced
                            or patched.
                          type: string
                        namespace:
                          description: Namespace is the Namespace of the object that
                            was synced or patched.
                          type: string
                      required:
                      - apiVersion
                      - kind
                      - name
                      - namespace
                      - hash
                      - conditions
                      type: object
                    type: array
                required:
                - name
                type: object
              type: array
            syncSetStatus:
              description: SyncSetStatus is the list of status for SyncSets which
                apply to the cluster deployment.
              items:
                properties:
                  conditions:
                    description: Conditions is the list of SyncConditions used to
                      indicate UnknownObject when a resource type cannot be determined
                      from a SyncSet resource.
                    items:
                      properties:
                        lastProbeTime:
                          description: LastProbeTime is the last time we probed the
                            condition.
                          format: date-time
                          type: string
                        lastTransitionTime:
                          description: LastTransitionTime is the last time the condition
                            transitioned from one status to another.
                          format: date-time
                          type: string
                        message:
                          description: Message is a human-readable message indicating
                            details about last transition.
                          type: string
                        reason:
                          description: Reason is a unique, one-word, CamelCase reason
                            for the condition's last transition.
                          type: string
                        status:
                          description: Status is the status of the condition.
                          type: string
                        type:
                          description: Type is the type of the condition.
                          type: string
                      required:
                      - type
                      - status
                      type: object
                    type: array
                  name:
                    description: Name is the name of the SyncSet.
                    type: string
                  patches:
                    description: Patches is the list of SyncStatus for patches that
                      have been applied.
                    items:
                      properties:
                        apiVersion:
                          description: APIVersion is the Group and Version of the
                            object that was synced or patched.
                          type: string
                        conditions:
                          description: Conditions is the list of conditions indicating
                            success or failure of object create, update and delete
                            as well as patch application.
                          items:
                            properties:
                              lastProbeTime:
                                description: LastProbeTime is the last time we probed
                                  the condition.
                                format: date-time
                                type: string
                              lastTransitionTime:
                                description: LastTransitionTime is the last time the
                                  condition transitioned from one status to another.
                                format: date-time
                                type: string
                              message:
                                description: Message is a human-readable message indicating
                                  details about last transition.
                                type: string
                              reason:
                                description: Reason is a unique, one-word, CamelCase
                                  reason for the condition's last transition.
                                type: string
                              status:
                                description: Status is the status of the condition.
                                type: string
                              type:
                                description: Type is the type of the condition.
                                type: string
                            required:
                            - type
                            - status
                            type: object
                          type: array
                        hash:
                          description: Hash is the unique md5 hash of the resource
                            or patch.
                          format: byte
                          type: string
                        kind:
                          description: Kind is the Kind of the object that was synced
                            or patched.
                          type: string
                        name:
                          description: Name is the name of the object that was synced
                            or patched.
                          type: string
                        namespace:
                          description: Namespace is the Namespace of the object that
                            was synced or patched.
                          type: string
                      required:
                      - apiVersion
                      - kind
                      - name
                      - namespace
                      - hash
                      - conditions
                      type: object
                    type: array
                  resources:
                    description: Resources is the list of SyncStatus for objects that
                      have been synced.
                    items:
                      properties:
                        apiVersion:
                          description: APIVersion is the Group and Version of the
                            object that was synced or patched.
                          type: string
                        conditions:
                          description: Conditions is the list of conditions indicating
                            success or failure of object create, update and delete
                            as well as patch application.
                          items:
                            properties:
                              lastProbeTime:
                                description: LastProbeTime is the last time we probed
                                  the condition.
                                format: date-time
                                type: string
                              lastTransitionTime:
                                description: LastTransitionTime is the last time the
                                  condition transitioned from one status to another.
                                format: date-time
                                type: string
                              message:
                                description: Message is a human-readable message indicating
                                  details about last transition.
                                type: string
                              reason:
                                description: Reason is a unique, one-word, CamelCase
                                  reason for the condition's last transition.
                                type: string
                              status:
                                description: Status is the status of the condition.
                                type: string
                              type:
                                description: Type is the type of the condition.
                                type: string
                            required:
                            - type
                            - status
                            type: object
                          type: array
                        hash:
                          description: Hash is the unique md5 hash of the resource
                            or patch.
                          format: byte
                          type: string
                        kind:
                          description: Kind is the Kind of the object that was synced
                            or patched.
                          type: string
                        name:
                          description: Name is the name of the object that was synced
                            or patched.
                          type: string
                        namespace:
                          description: Namespace is the Namespace of the object that
                            was synced or patched.
                          type: string
                      required:
                      - apiVersion
                      - kind
                      - name
                      - namespace
                      - hash
                      - conditions
                      type: object
                    type: array
                required:
                - name
                type: object
              type: array
            webConsoleURL:
              description: WebConsoleURL is the URL for the cluster's web console
                UI.
              type: string
          required:
          - installed
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_clusterdeploymentYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_clusterdeploymentYaml, nil
}

func configCrdsHive_v1alpha1_clusterdeploymentYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_clusterdeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_clusterdeployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_clusterimagesetYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: clusterimagesets.hive.openshift.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.hiveImage
    name: Hive
    type: string
  - JSONPath: .status.installerImage
    name: Installer
    type: string
  - JSONPath: .spec.releaseImage
    name: Release
    type: string
  group: hive.openshift.io
  names:
    kind: ClusterImageSet
    plural: clusterimagesets
    shortNames:
    - imgset
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            hiveImage:
              description: HiveImage is the Hive image to use when installing or destroying
                a cluster. If not present, the default Hive image for the clusterdeployment
                controller is used.
              type: string
            installerImage:
              description: InstallerImage is the image used to install a cluster.
                If not specified, the installer image reference is obtained from the
                release image.
              type: string
            releaseImage:
              description: ReleaseImage is the image that contains the payload to
                use when installing a cluster. If the installer image is specified,
                the release image is optional.
              type: string
          type: object
        status:
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_clusterimagesetYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_clusterimagesetYaml, nil
}

func configCrdsHive_v1alpha1_clusterimagesetYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_clusterimagesetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_clusterimageset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_dnszoneYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: dnszones.hive.openshift.io
spec:
  group: hive.openshift.io
  names:
    kind: DNSZone
    plural: dnszones
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            aws:
              description: AWS specifies AWS-specific cloud configuration
              properties:
                accountSecret:
                  description: AccountSecret contains a reference to a secret that
                    contains AWS credentials for CRUD operations
                  type: object
                region:
                  description: Region specifies the region-specific API endpoint to
                    use
                  type: string
              required:
              - accountSecret
              - region
              type: object
            zone:
              description: Zone is the DNS zoneto host
              type: string
          required:
          - zone
          type: object
        status:
          properties:
            lastSyncGeneration:
              description: LastSyncGeneration is the generation of the zone resource
                that was last sync'd. This is used to know if the Object has changed
                and we should sync immediately.
              format: int64
              type: integer
            lastSyncTimestamp:
              description: LastSyncTimestamp is the time that the zone was last sync'd.
              format: date-time
              type: string
          required:
          - lastSyncGeneration
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_dnszoneYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_dnszoneYaml, nil
}

func configCrdsHive_v1alpha1_dnszoneYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_dnszoneYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_dnszone.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_hiveconfigYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: hiveconfigs.hive.openshift.io
spec:
  group: hive.openshift.io
  names:
    kind: HiveConfig
    plural: hiveconfigs
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          type: object
        status:
          properties:
            aggregatedCAHash:
              description: AggregatedCAHash keeps an md5 hash of the aggregated CA
                configmap data for the system. When the configmap changes, admission
                is redeployed.
              type: string
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_hiveconfigYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_hiveconfigYaml, nil
}

func configCrdsHive_v1alpha1_hiveconfigYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_hiveconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_hiveconfig.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_selectorsyncidentityproviderYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: selectorsyncidentityproviders.hive.openshift.io
spec:
  group: hive.openshift.io
  names:
    kind: SelectorSyncIdentityProvider
    plural: selectorsyncidentityproviders
  scope: Cluster
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            clusterDeploymentSelector:
              description: ClusterDeploymentSelector is a LabelSelector indicating
                which clusters the SelectorIdentityProvider applies to in any namespace.
              type: object
            identityProviders:
              description: IdentityProviders is an ordered list of ways for a user
                to identify themselves
              items:
                properties:
                  basicAuth:
                    description: basicAuth contains configuration options for the
                      BasicAuth IdP
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      tlsClientCert:
                        description: tlsClientCert is an optional reference to a secret
                          by name that contains the PEM-encoded TLS client certificate
                          to present when connecting to the server. The key "tls.crt"
                          is used to locate the data. If specified and the secret
                          or expected key is not found, the identity provider is not
                          honored. If the specified certificate data is not valid,
                          the identity provider is not honored. The namespace for
                          this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      tlsClientKey:
                        description: tlsClientKey is an optional reference to a secret
                          by name that contains the PEM-encoded TLS private key for
                          the client certificate referenced in tlsClientCert. The
                          key "tls.key" is used to locate the data. If specified and
                          the secret or expected key is not found, the identity provider
                          is not honored. If the specified certificate data is not
                          valid, the identity provider is not honored. The namespace
                          for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      url:
                        description: url is the remote URL to connect to
                        type: string
                    required:
                    - url
                    type: object
                  challenge:
                    description: challenge indicates whether to issue WWW-Authenticate
                      challenges for this provider
                    type: boolean
                  github:
                    description: github enables user authentication using GitHub credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          This can only be configured when hostname is set to a non-empty
                          value. The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      hostname:
                        description: hostname is the optional domain (e.g. "mycompany.com")
                          for use with a hosted instance of GitHub Enterprise. It
                          must match the GitHub Enterprise settings value configured
                          at /setup/settings#hostname.
                        type: string
                      organizations:
                        description: organizations optionally restricts which organizations
                          are allowed to log in
                        items:
                          type: string
                        type: array
                      teams:
                        description: teams optionally restricts which teams are allowed
                          to log in. Format is <org>/<team>.
                        items:
                          type: string
                        type: array
                    required:
                    - clientID
                    - clientSecret
                    type: object
                  gitlab:
                    description: gitlab enables user authentication using GitLab credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      url:
                        description: url is the oauth server base URL
                        type: string
                    required:
                    - clientID
                    - clientSecret
                    - url
                    type: object
                  google:
                    description: google enables user authentication using Google credentials
                    properties:
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      hostedDomain:
                        description: hostedDomain is the optional Google App domain
                          (e.g. "mycompany.com") to restrict logins to
                        type: string
                    required:
                    - clientID
                    - clientSecret
                    type: object
                  htpasswd:
                    description: htpasswd enables user authentication using an HTPasswd
                      file to validate credentials
                    properties:
                      fileData:
                        description: fileData is a required reference to a secret
                          by name containing the data to use as the htpasswd file.
                          The key "htpasswd" is used to locate the data. If the secret
                          or expected key is not found, the identity provider is not
                          honored. If the specified htpasswd data is not valid, the
                          identity provider is not honored. The namespace for this
                          secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                    required:
                    - fileData
                    type: object
                  keystone:
                    description: keystone enables user authentication using keystone
                      password credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      domainName:
                        description: domainName is required for keystone v3
                        type: string
                      tlsClientCert:
                        description: tlsClientCert is an optional reference to a secret
                          by name that contains the PEM-encoded TLS client certificate
                          to present when connecting to the server. The key "tls.crt"
                          is used to locate the data. If specified and the secret
                          or expected key is not found, the identity provider is not
                          honored. If the specified certificate data is not valid,
                          the identity provider is not honored. The namespace for
                          this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      tlsClientKey:
                        description: tlsClientKey is an optional reference to a secret
                          by name that contains the PEM-encoded TLS private key for
                          the client certificate referenced in tlsClientCert. The
                          key "tls.key" is used to locate the data. If specified and
                          the secret or expected key is not found, the identity provider
                          is not honored. If the specified certificate data is not
                          valid, the identity provider is not honored. The namespace
                          for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      url:
                        description: url is the remote URL to connect to
                        type: string
                    required:
                    - url
                    - domainName
                    type: object
                  ldap:
                    description: ldap enables user authentication using LDAP credentials
                    properties:
                      attributes:
                        description: attributes maps LDAP attributes to identities
                        properties:
                          email:
                            description: email is the list of attributes whose values
                              should be used as the email address. Optional. If unspecified,
                              no email is set for the identity
                            items:
                              type: string
                            type: array
                          id:
                            description: id is the list of attributes whose values
                              should be used as the user ID. Required. First non-empty
                              attribute is used. At least one attribute is required.
                              If none of the listed attribute have a value, authentication
                              fails. LDAP standard identity attribute is "dn"
                            items:
                              type: string
                            type: array
                          name:
                            description: name is the list of attributes whose values
                              should be used as the display name. Optional. If unspecified,
                              no display name is set for the identity LDAP standard
                              display name attribute is "cn"
                            items:
                              type: string
                            type: array
                          preferredUsername:
                            description: preferredUsername is the list of attributes
                              whose values should be used as the preferred username.
                              LDAP standard login attribute is "uid"
                            items:
                              type: string
                            type: array
                        required:
                        - id
                        type: object
                      bindDN:
                        description: bindDN is an optional DN to bind with during
                          the search phase.
                        type: string
                      bindPassword:
                        description: bindPassword is an optional reference to a secret
                          by name containing a password to bind with during the search
                          phase. The key "bindPassword" is used to locate the data.
                          If specified and the secret or expected key is not found,
                          the identity provider is not honored. The namespace for
                          this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      insecure:
                        description: 'insecure, if true, indicates the connection
                          should not use TLS WARNING: Should not be set to ` + "`" + `true` + "`" + `
                          with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt
                          to connect using TLS, even when ` + "`" + `insecure` + "`" + ` is set to ` + "`" + `true` + "`" + `
                          When ` + "`" + `true` + "`" + `, "ldap://" URLS connect insecurely. When ` + "`" + `false` + "`" + `,
                          "ldap://" URLs are upgraded to a TLS connection using StartTLS
                          as specified in https://tools.ietf.org/html/rfc2830.'
                        type: boolean
                      url:
                        description: 'url is an RFC 2255 URL which specifies the LDAP
                          search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter'
                        type: string
                    required:
                    - url
                    - insecure
                    - attributes
                    type: object
                  login:
                    description: login indicates whether to use this identity provider
                      for unauthenticated browsers to login against
                    type: boolean
                  mappingMethod:
                    description: mappingMethod determines how identities from this
                      provider are mapped to users Defaults to "claim"
                    type: string
                  name:
                    description: 'name is used to qualify the identities returned
                      by this provider. - It MUST be unique and not shared by any
                      other identity provider used - It MUST be a valid path segment:
                      name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref:
                      https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName'
                    type: string
                  openID:
                    description: openID enables user authentication using OpenID credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      claims:
                        description: claims mappings
                        properties:
                          email:
                            description: email is the list of claims whose values
                              should be used as the email address. Optional. If unspecified,
                              no email is set for the identity
                            items:
                              type: string
                            type: array
                          name:
                            description: name is the list of claims whose values should
                              be used as the display name. Optional. If unspecified,
                              no display name is set for the identity
                            items:
                              type: string
                            type: array
                          preferredUsername:
                            description: preferredUsername is the list of claims whose
                              values should be used as the preferred username. If
                              unspecified, the preferred username is determined from
                              the value of the sub claim
                            items:
                              type: string
                            type: array
                        type: object
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      extraAuthorizeParameters:
                        description: extraAuthorizeParameters are any custom parameters
                          to add to the authorize request.
                        type: object
                      extraScopes:
                        description: extraScopes are any scopes to request in addition
                          to the standard "openid" scope.
                        items:
                          type: string
                        type: array
                      urls:
                        description: urls to use to authenticate
                        properties:
                          authorize:
                            description: authorize is the oauth authorization URL
                            type: string
                          token:
                            description: token is the oauth token granting URL
                            type: string
                          userInfo:
                            description: userInfo is the optional userinfo URL. If
                              present, a granted access_token is used to request claims
                              If empty, a granted id_token is parsed for claims
                            type: string
                        required:
                        - authorize
                        - token
                        type: object
                    required:
                    - clientID
                    - clientSecret
                    - urls
                    - claims
                    type: object
                  requestHeader:
                    description: requestHeader enables user authentication using request
                      header credentials
                    properties:
                      ca:
                        description: ca is a required reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. Specifically, it allows verification
                          of incoming requests to prevent header spoofing. The key
                          "ca.crt" is used to locate the data. If the config map or
                          expected key is not found, the identity provider is not
                          honored. If the specified ca data is not valid, the identity
                          provider is not honored. The namespace for this config map
                          is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      challengeURL:
                        description: challengeURL is a URL to redirect unauthenticated
                          /authorize requests to Unauthenticated requests from OAuth
                          clients which expect WWW-Authenticate challenges will be
                          redirected here. ${url} is replaced with the current URL,
                          escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url}
                          ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query}
                          Required when challenge is set to true.
                        type: string
                      clientCommonNames:
                        description: clientCommonNames is an optional list of common
                          names to require a match from. If empty, any client certificate
                          validated against the clientCA bundle is considered authoritative.
                        items:
                          type: string
                        type: array
                      emailHeaders:
                        description: emailHeaders is the set of headers to check for
                          the email address
                        items:
                          type: string
                        type: array
                      headers:
                        description: headers is the set of headers to check for identity
                          information
                        items:
                          type: string
                        type: array
                      loginURL:
                        description: loginURL is a URL to redirect unauthenticated
                          /authorize requests to Unauthenticated requests from OAuth
                          clients which expect interactive logins will be redirected
                          here ${url} is replaced with the current URL, escaped to
                          be safe in a query parameter   https://www.example.com/sso-login?then=${url}
                          ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query}
                          Required when login is set to true.
                        type: string
                      nameHeaders:
                        description: nameHeaders is the set of headers to check for
                          the display name
                        items:
                          type: string
                        type: array
                      preferredUsernameHeaders:
                        description: preferredUsernameHeaders is the set of headers
                          to check for the preferred username
                        items:
                          type: string
                        type: array
                    required:
                    - loginURL
                    - challengeURL
                    - ca
                    - headers
                    - preferredUsernameHeaders
                    - nameHeaders
                    - emailHeaders
                    type: object
                  type:
                    description: type identifies the identity provider type for this
                      entry.
                    type: string
                required:
                - name
                - challenge
                - login
                - type
                type: object
              type: array
          required:
          - identityProviders
          type: object
        status:
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_selectorsyncidentityproviderYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_selectorsyncidentityproviderYaml, nil
}

func configCrdsHive_v1alpha1_selectorsyncidentityproviderYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_selectorsyncidentityproviderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_selectorsyncidentityprovider.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_selectorsyncsetYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: selectorsyncsets.hive.openshift.io
spec:
  group: hive.openshift.io
  names:
    kind: SelectorSyncSet
    plural: selectorsyncsets
  scope: Cluster
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            clusterDeploymentSelector:
              description: ClusterDeploymentSelector is a LabelSelector indicating
                which clusters the SelectorSyncSet applies to in any namespace.
              type: object
            patches:
              description: Patches is the list of patches to apply.
              items:
                properties:
                  apiVersion:
                    description: APIVersion is the Group and Version of the object
                      to be patched.
                    type: string
                  kind:
                    description: Kind is the Kind of the object to be patched.
                    type: string
                  name:
                    description: Name is the name of the object to be patched.
                    type: string
                  namespace:
                    description: Namespace is the Namespace in which the object to
                      patch exists. Defaults to the SyncSet's Namespace.
                    type: string
                  patch:
                    description: Patch is the patch to apply.
                    format: byte
                    type: string
                  patchType:
                    description: PatchType indicates the PatchType as "json" (default),
                      "merge" or "strategic".
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - patch
                type: object
              type: array
            resourceApplyMode:
              description: ResourceApplyMode indicates if the resource apply mode
                is "upsert" (default) or "sync". ApplyMode "upsert" indicates create
                and update. ApplyMode "sync" indicates create, update and delete.
              type: string
            resources:
              description: Resources is the list of objects to sync.
              items:
                type: object
              type: array
          type: object
        status:
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_selectorsyncsetYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_selectorsyncsetYaml, nil
}

func configCrdsHive_v1alpha1_selectorsyncsetYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_selectorsyncsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_selectorsyncset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_syncidentityproviderYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: syncidentityproviders.hive.openshift.io
spec:
  group: hive.openshift.io
  names:
    kind: SyncIdentityProvider
    plural: syncidentityproviders
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            clusterDeploymentRefs:
              description: ClusterDeploymentRefs is the list of LocalObjectReference
                indicating which clusters the SyncSet applies to in the SyncSet's
                namespace.
              items:
                type: object
              type: array
            identityProviders:
              description: IdentityProviders is an ordered list of ways for a user
                to identify themselves
              items:
                properties:
                  basicAuth:
                    description: basicAuth contains configuration options for the
                      BasicAuth IdP
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      tlsClientCert:
                        description: tlsClientCert is an optional reference to a secret
                          by name that contains the PEM-encoded TLS client certificate
                          to present when connecting to the server. The key "tls.crt"
                          is used to locate the data. If specified and the secret
                          or expected key is not found, the identity provider is not
                          honored. If the specified certificate data is not valid,
                          the identity provider is not honored. The namespace for
                          this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      tlsClientKey:
                        description: tlsClientKey is an optional reference to a secret
                          by name that contains the PEM-encoded TLS private key for
                          the client certificate referenced in tlsClientCert. The
                          key "tls.key" is used to locate the data. If specified and
                          the secret or expected key is not found, the identity provider
                          is not honored. If the specified certificate data is not
                          valid, the identity provider is not honored. The namespace
                          for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      url:
                        description: url is the remote URL to connect to
                        type: string
                    required:
                    - url
                    type: object
                  challenge:
                    description: challenge indicates whether to issue WWW-Authenticate
                      challenges for this provider
                    type: boolean
                  github:
                    description: github enables user authentication using GitHub credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          This can only be configured when hostname is set to a non-empty
                          value. The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      hostname:
                        description: hostname is the optional domain (e.g. "mycompany.com")
                          for use with a hosted instance of GitHub Enterprise. It
                          must match the GitHub Enterprise settings value configured
                          at /setup/settings#hostname.
                        type: string
                      organizations:
                        description: organizations optionally restricts which organizations
                          are allowed to log in
                        items:
                          type: string
                        type: array
                      teams:
                        description: teams optionally restricts which teams are allowed
                          to log in. Format is <org>/<team>.
                        items:
                          type: string
                        type: array
                    required:
                    - clientID
                    - clientSecret
                    type: object
                  gitlab:
                    description: gitlab enables user authentication using GitLab credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      url:
                        description: url is the oauth server base URL
                        type: string
                    required:
                    - clientID
                    - clientSecret
                    - url
                    type: object
                  google:
                    description: google enables user authentication using Google credentials
                    properties:
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      hostedDomain:
                        description: hostedDomain is the optional Google App domain
                          (e.g. "mycompany.com") to restrict logins to
                        type: string
                    required:
                    - clientID
                    - clientSecret
                    type: object
                  htpasswd:
                    description: htpasswd enables user authentication using an HTPasswd
                      file to validate credentials
                    properties:
                      fileData:
                        description: fileData is a required reference to a secret
                          by name containing the data to use as the htpasswd file.
                          The key "htpasswd" is used to locate the data. If the secret
                          or expected key is not found, the identity provider is not
                          honored. If the specified htpasswd data is not valid, the
                          identity provider is not honored. The namespace for this
                          secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                    required:
                    - fileData
                    type: object
                  keystone:
                    description: keystone enables user authentication using keystone
                      password credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      domainName:
                        description: domainName is required for keystone v3
                        type: string
                      tlsClientCert:
                        description: tlsClientCert is an optional reference to a secret
                          by name that contains the PEM-encoded TLS client certificate
                          to present when connecting to the server. The key "tls.crt"
                          is used to locate the data. If specified and the secret
                          or expected key is not found, the identity provider is not
                          honored. If the specified certificate data is not valid,
                          the identity provider is not honored. The namespace for
                          this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      tlsClientKey:
                        description: tlsClientKey is an optional reference to a secret
                          by name that contains the PEM-encoded TLS private key for
                          the client certificate referenced in tlsClientCert. The
                          key "tls.key" is used to locate the data. If specified and
                          the secret or expected key is not found, the identity provider
                          is not honored. If the specified certificate data is not
                          valid, the identity provider is not honored. The namespace
                          for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      url:
                        description: url is the remote URL to connect to
                        type: string
                    required:
                    - url
                    - domainName
                    type: object
                  ldap:
                    description: ldap enables user authentication using LDAP credentials
                    properties:
                      attributes:
                        description: attributes maps LDAP attributes to identities
                        properties:
                          email:
                            description: email is the list of attributes whose values
                              should be used as the email address. Optional. If unspecified,
                              no email is set for the identity
                            items:
                              type: string
                            type: array
                          id:
                            description: id is the list of attributes whose values
                              should be used as the user ID. Required. First non-empty
                              attribute is used. At least one attribute is required.
                              If none of the listed attribute have a value, authentication
                              fails. LDAP standard identity attribute is "dn"
                            items:
                              type: string
                            type: array
                          name:
                            description: name is the list of attributes whose values
                              should be used as the display name. Optional. If unspecified,
                              no display name is set for the identity LDAP standard
                              display name attribute is "cn"
                            items:
                              type: string
                            type: array
                          preferredUsername:
                            description: preferredUsername is the list of attributes
                              whose values should be used as the preferred username.
                              LDAP standard login attribute is "uid"
                            items:
                              type: string
                            type: array
                        required:
                        - id
                        type: object
                      bindDN:
                        description: bindDN is an optional DN to bind with during
                          the search phase.
                        type: string
                      bindPassword:
                        description: bindPassword is an optional reference to a secret
                          by name containing a password to bind with during the search
                          phase. The key "bindPassword" is used to locate the data.
                          If specified and the secret or expected key is not found,
                          the identity provider is not honored. The namespace for
                          this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      insecure:
                        description: 'insecure, if true, indicates the connection
                          should not use TLS WARNING: Should not be set to ` + "`" + `true` + "`" + `
                          with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt
                          to connect using TLS, even when ` + "`" + `insecure` + "`" + ` is set to ` + "`" + `true` + "`" + `
                          When ` + "`" + `true` + "`" + `, "ldap://" URLS connect insecurely. When ` + "`" + `false` + "`" + `,
                          "ldap://" URLs are upgraded to a TLS connection using StartTLS
                          as specified in https://tools.ietf.org/html/rfc2830.'
                        type: boolean
                      url:
                        description: 'url is an RFC 2255 URL which specifies the LDAP
                          search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter'
                        type: string
                    required:
                    - url
                    - insecure
                    - attributes
                    type: object
                  login:
                    description: login indicates whether to use this identity provider
                      for unauthenticated browsers to login against
                    type: boolean
                  mappingMethod:
                    description: mappingMethod determines how identities from this
                      provider are mapped to users Defaults to "claim"
                    type: string
                  name:
                    description: 'name is used to qualify the identities returned
                      by this provider. - It MUST be unique and not shared by any
                      other identity provider used - It MUST be a valid path segment:
                      name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref:
                      https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName'
                    type: string
                  openID:
                    description: openID enables user authentication using OpenID credentials
                    properties:
                      ca:
                        description: ca is an optional reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. The key "ca.crt" is used to locate
                          the data. If specified and the config map or expected key
                          is not found, the identity provider is not honored. If the
                          specified ca data is not valid, the identity provider is
                          not honored. If empty, the default system roots are used.
                          The namespace for this config map is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      claims:
                        description: claims mappings
                        properties:
                          email:
                            description: email is the list of claims whose values
                              should be used as the email address. Optional. If unspecified,
                              no email is set for the identity
                            items:
                              type: string
                            type: array
                          name:
                            description: name is the list of claims whose values should
                              be used as the display name. Optional. If unspecified,
                              no display name is set for the identity
                            items:
                              type: string
                            type: array
                          preferredUsername:
                            description: preferredUsername is the list of claims whose
                              values should be used as the preferred username. If
                              unspecified, the preferred username is determined from
                              the value of the sub claim
                            items:
                              type: string
                            type: array
                        type: object
                      clientID:
                        description: clientID is the oauth client ID
                        type: string
                      clientSecret:
                        description: clientSecret is a required reference to the secret
                          by name containing the oauth client secret. The key "clientSecret"
                          is used to locate the data. If the secret or expected key
                          is not found, the identity provider is not honored. The
                          namespace for this secret is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              secret
                            type: string
                        required:
                        - name
                        type: object
                      extraAuthorizeParameters:
                        description: extraAuthorizeParameters are any custom parameters
                          to add to the authorize request.
                        type: object
                      extraScopes:
                        description: extraScopes are any scopes to request in addition
                          to the standard "openid" scope.
                        items:
                          type: string
                        type: array
                      urls:
                        description: urls to use to authenticate
                        properties:
                          authorize:
                            description: authorize is the oauth authorization URL
                            type: string
                          token:
                            description: token is the oauth token granting URL
                            type: string
                          userInfo:
                            description: userInfo is the optional userinfo URL. If
                              present, a granted access_token is used to request claims
                              If empty, a granted id_token is parsed for claims
                            type: string
                        required:
                        - authorize
                        - token
                        type: object
                    required:
                    - clientID
                    - clientSecret
                    - urls
                    - claims
                    type: object
                  requestHeader:
                    description: requestHeader enables user authentication using request
                      header credentials
                    properties:
                      ca:
                        description: ca is a required reference to a config map by
                          name containing the PEM-encoded CA bundle. It is used as
                          a trust anchor to validate the TLS certificate presented
                          by the remote server. Specifically, it allows verification
                          of incoming requests to prevent header spoofing. The key
                          "ca.crt" is used to locate the data. If the config map or
                          expected key is not found, the identity provider is not
                          honored. If the specified ca data is not valid, the identity
                          provider is not honored. The namespace for this config map
                          is openshift-config.
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                      challengeURL:
                        description: challengeURL is a URL to redirect unauthenticated
                          /authorize requests to Unauthenticated requests from OAuth
                          clients which expect WWW-Authenticate challenges will be
                          redirected here. ${url} is replaced with the current URL,
                          escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url}
                          ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query}
                          Required when challenge is set to true.
                        type: string
                      clientCommonNames:
                        description: clientCommonNames is an optional list of common
                          names to require a match from. If empty, any client certificate
                          validated against the clientCA bundle is considered authoritative.
                        items:
                          type: string
                        type: array
                      emailHeaders:
                        description: emailHeaders is the set of headers to check for
                          the email address
                        items:
                          type: string
                        type: array
                      headers:
                        description: headers is the set of headers to check for identity
                          information
                        items:
                          type: string
                        type: array
                      loginURL:
                        description: loginURL is a URL to redirect unauthenticated
                          /authorize requests to Unauthenticated requests from OAuth
                          clients which expect interactive logins will be redirected
                          here ${url} is replaced with the current URL, escaped to
                          be safe in a query parameter   https://www.example.com/sso-login?then=${url}
                          ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query}
                          Required when login is set to true.
                        type: string
                      nameHeaders:
                        description: nameHeaders is the set of headers to check for
                          the display name
                        items:
                          type: string
                        type: array
                      preferredUsernameHeaders:
                        description: preferredUsernameHeaders is the set of headers
                          to check for the preferred username
                        items:
                          type: string
                        type: array
                    required:
                    - loginURL
                    - challengeURL
                    - ca
                    - headers
                    - preferredUsernameHeaders
                    - nameHeaders
                    - emailHeaders
                    type: object
                  type:
                    description: type identifies the identity provider type for this
                      entry.
                    type: string
                required:
                - name
                - challenge
                - login
                - type
                type: object
              type: array
          required:
          - identityProviders
          - clusterDeploymentRefs
          type: object
        status:
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_syncidentityproviderYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_syncidentityproviderYaml, nil
}

func configCrdsHive_v1alpha1_syncidentityproviderYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_syncidentityproviderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_syncidentityprovider.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsHive_v1alpha1_syncsetYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: syncsets.hive.openshift.io
spec:
  group: hive.openshift.io
  names:
    kind: SyncSet
    plural: syncsets
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            clusterDeploymentRefs:
              description: ClusterDeploymentRefs is the list of LocalObjectReference
                indicating which clusters the SyncSet applies to in the SyncSet's
                namespace.
              items:
                type: object
              type: array
            patches:
              description: Patches is the list of patches to apply.
              items:
                properties:
                  apiVersion:
                    description: APIVersion is the Group and Version of the object
                      to be patched.
                    type: string
                  kind:
                    description: Kind is the Kind of the object to be patched.
                    type: string
                  name:
                    description: Name is the name of the object to be patched.
                    type: string
                  namespace:
                    description: Namespace is the Namespace in which the object to
                      patch exists. Defaults to the SyncSet's Namespace.
                    type: string
                  patch:
                    description: Patch is the patch to apply.
                    format: byte
                    type: string
                  patchType:
                    description: PatchType indicates the PatchType as "json" (default),
                      "merge" or "strategic".
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - patch
                type: object
              type: array
            resourceApplyMode:
              description: ResourceApplyMode indicates if the resource apply mode
                is "upsert" (default) or "sync". ApplyMode "upsert" indicates create
                and update. ApplyMode "sync" indicates create, update and delete.
              type: string
            resources:
              description: Resources is the list of objects to sync.
              items:
                type: object
              type: array
          required:
          - clusterDeploymentRefs
          type: object
        status:
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func configCrdsHive_v1alpha1_syncsetYamlBytes() ([]byte, error) {
	return _configCrdsHive_v1alpha1_syncsetYaml, nil
}

func configCrdsHive_v1alpha1_syncsetYaml() (*asset, error) {
	bytes, err := configCrdsHive_v1alpha1_syncsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/hive_v1alpha1_syncset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configManagerDeploymentYaml = []byte(`apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-controllers
  namespace: hive
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      controller-tools.k8s.io: "1.0"
  replicas: 1
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        control-plane: controller-manager
        controller-tools.k8s.io: "1.0"
    spec:
      serviceAccountName: default
      volumes:
      - name: kubectl-cache
        emptyDir: {}
      containers:
      # By default we will use the latest CI images published from hive master:
      - image: registry.svc.ci.openshift.org/openshift/hive-v4.0:hive
        imagePullPolicy: Always
        name: manager
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 75Mi
        command:
          - /opt/services/manager
          - --log-level
          - debug
        volumeMounts:
        - name: kubectl-cache
          mountPath: /var/cache/kubectl
        env:
        - name: CLI_CACHE_DIR
          value: /var/cache/kubectl
      terminationGracePeriodSeconds: 10
`)

func configManagerDeploymentYamlBytes() ([]byte, error) {
	return _configManagerDeploymentYaml, nil
}

func configManagerDeploymentYaml() (*asset, error) {
	bytes, err := configManagerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/manager/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/hiveadmission/apiservice.yaml":                        configHiveadmissionApiserviceYaml,
	"config/hiveadmission/clusterdeployment-webhook.yaml":         configHiveadmissionClusterdeploymentWebhookYaml,
	"config/hiveadmission/clusterimageset-webhook.yaml":           configHiveadmissionClusterimagesetWebhookYaml,
	"config/hiveadmission/daemonset.yaml":                         configHiveadmissionDaemonsetYaml,
	"config/hiveadmission/dnszones-webhook.yaml":                  configHiveadmissionDnszonesWebhookYaml,
	"config/hiveadmission/hiveadmission_rbac_role.yaml":           configHiveadmissionHiveadmission_rbac_roleYaml,
	"config/hiveadmission/hiveadmission_rbac_role_binding.yaml":   configHiveadmissionHiveadmission_rbac_role_bindingYaml,
	"config/hiveadmission/service-account.yaml":                   configHiveadmissionServiceAccountYaml,
	"config/hiveadmission/service.yaml":                           configHiveadmissionServiceYaml,
	"config/crds/hive_v1alpha1_clusterdeployment.yaml":            configCrdsHive_v1alpha1_clusterdeploymentYaml,
	"config/crds/hive_v1alpha1_clusterimageset.yaml":              configCrdsHive_v1alpha1_clusterimagesetYaml,
	"config/crds/hive_v1alpha1_dnszone.yaml":                      configCrdsHive_v1alpha1_dnszoneYaml,
	"config/crds/hive_v1alpha1_hiveconfig.yaml":                   configCrdsHive_v1alpha1_hiveconfigYaml,
	"config/crds/hive_v1alpha1_selectorsyncidentityprovider.yaml": configCrdsHive_v1alpha1_selectorsyncidentityproviderYaml,
	"config/crds/hive_v1alpha1_selectorsyncset.yaml":              configCrdsHive_v1alpha1_selectorsyncsetYaml,
	"config/crds/hive_v1alpha1_syncidentityprovider.yaml":         configCrdsHive_v1alpha1_syncidentityproviderYaml,
	"config/crds/hive_v1alpha1_syncset.yaml":                      configCrdsHive_v1alpha1_syncsetYaml,
	"config/manager/deployment.yaml":                              configManagerDeploymentYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"crds": {nil, map[string]*bintree{
			"hive_v1alpha1_clusterdeployment.yaml":            {configCrdsHive_v1alpha1_clusterdeploymentYaml, map[string]*bintree{}},
			"hive_v1alpha1_clusterimageset.yaml":              {configCrdsHive_v1alpha1_clusterimagesetYaml, map[string]*bintree{}},
			"hive_v1alpha1_dnszone.yaml":                      {configCrdsHive_v1alpha1_dnszoneYaml, map[string]*bintree{}},
			"hive_v1alpha1_hiveconfig.yaml":                   {configCrdsHive_v1alpha1_hiveconfigYaml, map[string]*bintree{}},
			"hive_v1alpha1_selectorsyncidentityprovider.yaml": {configCrdsHive_v1alpha1_selectorsyncidentityproviderYaml, map[string]*bintree{}},
			"hive_v1alpha1_selectorsyncset.yaml":              {configCrdsHive_v1alpha1_selectorsyncsetYaml, map[string]*bintree{}},
			"hive_v1alpha1_syncidentityprovider.yaml":         {configCrdsHive_v1alpha1_syncidentityproviderYaml, map[string]*bintree{}},
			"hive_v1alpha1_syncset.yaml":                      {configCrdsHive_v1alpha1_syncsetYaml, map[string]*bintree{}},
		}},
		"hiveadmission": {nil, map[string]*bintree{
			"apiservice.yaml":                      {configHiveadmissionApiserviceYaml, map[string]*bintree{}},
			"clusterdeployment-webhook.yaml":       {configHiveadmissionClusterdeploymentWebhookYaml, map[string]*bintree{}},
			"clusterimageset-webhook.yaml":         {configHiveadmissionClusterimagesetWebhookYaml, map[string]*bintree{}},
			"daemonset.yaml":                       {configHiveadmissionDaemonsetYaml, map[string]*bintree{}},
			"dnszones-webhook.yaml":                {configHiveadmissionDnszonesWebhookYaml, map[string]*bintree{}},
			"hiveadmission_rbac_role.yaml":         {configHiveadmissionHiveadmission_rbac_roleYaml, map[string]*bintree{}},
			"hiveadmission_rbac_role_binding.yaml": {configHiveadmissionHiveadmission_rbac_role_bindingYaml, map[string]*bintree{}},
			"service-account.yaml":                 {configHiveadmissionServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":                         {configHiveadmissionServiceYaml, map[string]*bintree{}},
		}},
		"manager": {nil, map[string]*bintree{
			"deployment.yaml": {configManagerDeploymentYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
