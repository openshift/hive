// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	configv1 "github.com/openshift/api/config/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SelectorSyncIdentityProviderSpecApplyConfiguration represents an declarative configuration of the SelectorSyncIdentityProviderSpec type for use
// with apply.
type SelectorSyncIdentityProviderSpecApplyConfiguration struct {
	SyncIdentityProviderCommonSpecApplyConfiguration `json:",inline"`
	ClusterDeploymentSelector                        *metav1.LabelSelector `json:"clusterDeploymentSelector,omitempty"`
}

// SelectorSyncIdentityProviderSpecApplyConfiguration constructs an declarative configuration of the SelectorSyncIdentityProviderSpec type for use with
// apply.
func SelectorSyncIdentityProviderSpec() *SelectorSyncIdentityProviderSpecApplyConfiguration {
	return &SelectorSyncIdentityProviderSpecApplyConfiguration{}
}

// WithIdentityProviders adds the given value to the IdentityProviders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IdentityProviders field.
func (b *SelectorSyncIdentityProviderSpecApplyConfiguration) WithIdentityProviders(values ...configv1.IdentityProvider) *SelectorSyncIdentityProviderSpecApplyConfiguration {
	for i := range values {
		b.IdentityProviders = append(b.IdentityProviders, values[i])
	}
	return b
}

// WithClusterDeploymentSelector sets the ClusterDeploymentSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterDeploymentSelector field is set to the value of the last call.
func (b *SelectorSyncIdentityProviderSpecApplyConfiguration) WithClusterDeploymentSelector(value metav1.LabelSelector) *SelectorSyncIdentityProviderSpecApplyConfiguration {
	b.ClusterDeploymentSelector = &value
	return b
}
