// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/hive/apis/hive/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SyncSetCommonSpecApplyConfiguration represents an declarative configuration of the SyncSetCommonSpec type for use
// with apply.
type SyncSetCommonSpecApplyConfiguration struct {
	Resources         []runtime.RawExtension              `json:"resources,omitempty"`
	ResourceApplyMode *v1.SyncSetResourceApplyMode        `json:"resourceApplyMode,omitempty"`
	Patches           []SyncObjectPatchApplyConfiguration `json:"patches,omitempty"`
	Secrets           []SecretMappingApplyConfiguration   `json:"secretMappings,omitempty"`
	ApplyBehavior     *v1.SyncSetApplyBehavior            `json:"applyBehavior,omitempty"`
}

// SyncSetCommonSpecApplyConfiguration constructs an declarative configuration of the SyncSetCommonSpec type for use with
// apply.
func SyncSetCommonSpec() *SyncSetCommonSpecApplyConfiguration {
	return &SyncSetCommonSpecApplyConfiguration{}
}

// WithResources adds the given value to the Resources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Resources field.
func (b *SyncSetCommonSpecApplyConfiguration) WithResources(values ...runtime.RawExtension) *SyncSetCommonSpecApplyConfiguration {
	for i := range values {
		b.Resources = append(b.Resources, values[i])
	}
	return b
}

// WithResourceApplyMode sets the ResourceApplyMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceApplyMode field is set to the value of the last call.
func (b *SyncSetCommonSpecApplyConfiguration) WithResourceApplyMode(value v1.SyncSetResourceApplyMode) *SyncSetCommonSpecApplyConfiguration {
	b.ResourceApplyMode = &value
	return b
}

// WithPatches adds the given value to the Patches field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Patches field.
func (b *SyncSetCommonSpecApplyConfiguration) WithPatches(values ...*SyncObjectPatchApplyConfiguration) *SyncSetCommonSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPatches")
		}
		b.Patches = append(b.Patches, *values[i])
	}
	return b
}

// WithSecrets adds the given value to the Secrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Secrets field.
func (b *SyncSetCommonSpecApplyConfiguration) WithSecrets(values ...*SecretMappingApplyConfiguration) *SyncSetCommonSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSecrets")
		}
		b.Secrets = append(b.Secrets, *values[i])
	}
	return b
}

// WithApplyBehavior sets the ApplyBehavior field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApplyBehavior field is set to the value of the last call.
func (b *SyncSetCommonSpecApplyConfiguration) WithApplyBehavior(value v1.SyncSetApplyBehavior) *SyncSetCommonSpecApplyConfiguration {
	b.ApplyBehavior = &value
	return b
}
