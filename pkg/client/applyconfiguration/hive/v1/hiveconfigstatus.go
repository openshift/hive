// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// HiveConfigStatusApplyConfiguration represents an declarative configuration of the HiveConfigStatus type for use
// with apply.
type HiveConfigStatusApplyConfiguration struct {
	AggregatorClientCAHash *string                                 `json:"aggregatorClientCAHash,omitempty"`
	ObservedGeneration     *int64                                  `json:"observedGeneration,omitempty"`
	ConfigApplied          *bool                                   `json:"configApplied,omitempty"`
	Conditions             []HiveConfigConditionApplyConfiguration `json:"conditions,omitempty"`
}

// HiveConfigStatusApplyConfiguration constructs an declarative configuration of the HiveConfigStatus type for use with
// apply.
func HiveConfigStatus() *HiveConfigStatusApplyConfiguration {
	return &HiveConfigStatusApplyConfiguration{}
}

// WithAggregatorClientCAHash sets the AggregatorClientCAHash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AggregatorClientCAHash field is set to the value of the last call.
func (b *HiveConfigStatusApplyConfiguration) WithAggregatorClientCAHash(value string) *HiveConfigStatusApplyConfiguration {
	b.AggregatorClientCAHash = &value
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *HiveConfigStatusApplyConfiguration) WithObservedGeneration(value int64) *HiveConfigStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithConfigApplied sets the ConfigApplied field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigApplied field is set to the value of the last call.
func (b *HiveConfigStatusApplyConfiguration) WithConfigApplied(value bool) *HiveConfigStatusApplyConfiguration {
	b.ConfigApplied = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *HiveConfigStatusApplyConfiguration) WithConditions(values ...*HiveConfigConditionApplyConfiguration) *HiveConfigStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
